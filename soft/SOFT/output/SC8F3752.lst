

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 21 19:54:49 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F3752
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	swtext2,local,class=CONST,delta=2
    16                           	psect	text20,local,class=CODE,merge=1,delta=2
    17                           	psect	swtext3,local,class=CONST,delta=2
    18                           	psect	text21,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text23,local,class=CODE,merge=1,delta=2
    21                           	psect	text24,local,class=CODE,merge=1,delta=2
    22                           	psect	text30,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	pa_nodes0,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	text0
    63  0000                     __ptext0:	
    64  001F                     _ADCON0	set	31
    65  001E                     _ADRESH	set	30
    66  0012                     _T2CON	set	18
    67  0011                     _TMR2	set	17
    68  000D                     _PIR2	set	13
    69  000C                     _PIR1	set	12
    70  000B                     _INTCON	set	11
    71  0008                     _WPDB	set	8
    72  0007                     _WPDA	set	7
    73  0006                     _PORTB	set	6
    74  0005                     _PORTA	set	5
    75  0001                     _TMR0	set	1
    76  00F9                     _GODONE	set	249
    77  0060                     _TMR1IF	set	96
    78  0061                     _TMR2IF	set	97
    79  0067                     _RAIF	set	103
    80  0058                     _RBIF	set	88
    81  005A                     _T0IF	set	90
    82  005B                     _RBIE	set	91
    83  005D                     _T0IE	set	93
    84  005E                     _PEIE	set	94
    85  005F                     _GIE	set	95
    86  0030                     _RB0	set	48
    87  0034                     _RB4	set	52
    88  0035                     _RB5	set	53
    89  0028                     _RA0	set	40
    90  0029                     _RA1	set	41
    91  002B                     _RA3	set	43
    92  002E                     _RA6	set	46
    93  009F                     _ADCON1	set	159
    94  009E                     _ADRESL	set	158
    95  0096                     _IOCB	set	150
    96  0095                     _WPUB	set	149
    97  0092                     _PR2	set	146
    98  008F                     _OSCCON	set	143
    99  008D                     _PIE2	set	141
   100  008C                     _PIE1	set	140
   101  0087                     _IOCA	set	135
   102  0086                     _TRISB	set	134
   103  0085                     _TRISA	set	133
   104  0081                     _OPTION_REG	set	129
   105  0460                     _TMR1IE	set	1120
   106  0461                     _TMR2IE	set	1121
   107  0467                     _RAIE	set	1127
   108  0431                     _TRISB1	set	1073
   109  042A                     _TRISA2	set	1066
   110  042C                     _TRISA4	set	1068
   111  042D                     _TRISA5	set	1069
   112  042F                     _TRISA7	set	1071
   113  011D                     _PWMD23H	set	285
   114  0107                     _PWMCON0	set	263
   115  0105                     _WDTCON	set	261
   116  0195                     _PWMD2L	set	405
   117  0190                     _PWMTH	set	400
   118  018F                     _PWMTL	set	399
   119  018E                     _WPUA	set	398
   120  0189                     _ANSELH	set	393
   121  0188                     _ANSEL	set	392
   122                           
   123                           	psect	cinit
   124  000D                     start_initialization:	
   125                           ; #config settings
   126                           
   127  000D                     __initialization:	
   128  000D  3020               	movlw	low __pbssBANK0
   129                           
   130                           ; Clear objects allocated to BITCOMMON
   131  000E  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   132  000F  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   133                           
   134                           ; Clear objects allocated to BANK0
   135  0010  1383               	bcf	3,7	;select IRP bank0
   136  0011  0084               	movwf	4
   137  0012  3050               	movlw	low (__pbssBANK0+48)
   138  0013  118A  26CA  118A   	fcall	clear_ram0
   139                           
   140                           ; Clear objects allocated to BANK1
   141  0016  30A0               	movlw	low __pbssBANK1
   142  0017  0084               	movwf	4
   143  0018  30B9               	movlw	low (__pbssBANK1+25)
   144  0019  118A  26CA         	fcall	clear_ram0
   145  001B                     end_of_initialization:	
   146                           ;End of C runtime variable initialization code
   147                           
   148  001B                     __end_of__initialization:	
   149  001B  0183               	clrf	3
   150  001C  118A  2E1D         	ljmp	_main	;jump to C main() function
   151                           
   152                           	psect	bitbssCOMMON
   153  0380                     __pbitbssCOMMON:	
   154  0380                     _gbBatCharge:	
   155  0380                     	ds	1
   156  0381                     _gbUsbPlugInEvent:	
   157  0381                     	ds	1
   158  0382                     _gbTime10ms:	
   159  0382                     	ds	1
   160  0383                     _gbLed2hz:	
   161  0383                     	ds	1
   162  0384                     _gbLed1hz:	
   163  0384                     	ds	1
   164  0385                     _usbIndex:	
   165  0385                     	ds	1
   166  0386                     _gbLedWait:	
   167  0386                     	ds	1
   168  0387                     _gbCupEvent:	
   169  0387                     	ds	1
   170  0388                     _gIsCupOk:	
   171  0388                     	ds	1
   172  0389                     _gIsCharging:	
   173  0389                     	ds	1
   174  038A                     _gbitChrPwmDuty:	
   175  038A                     	ds	1
   176  038B                     _gbUsbPlugIn:	
   177  038B                     	ds	1
   178  038C                     _gbUcp:	
   179  038C                     	ds	1
   180  038D                     _gbOcp:	
   181  038D                     	ds	1
   182                           
   183                           	psect	bssBANK0
   184  0020                     __pbssBANK0:	
   185  0020                     _adc:	
   186  0020                     	ds	27
   187  003B                     _key:	
   188  003B                     	ds	5
   189  0040                     ADC_Sample@admax:	
   190  0040                     	ds	2
   191  0042                     ADC_Sample@admin:	
   192  0042                     	ds	2
   193  0044                     _charDisplayCnt:	
   194  0044                     	ds	2
   195  0046                     _work:	
   196  0046                     	ds	2
   197  0048                     _sleep10sTimeCnt:	
   198  0048                     	ds	2
   199  004A                     ADC_Sample@adtimes:	
   200  004A                     	ds	1
   201  004B                     _gTimeCntFor10ms:	
   202  004B                     	ds	1
   203  004C                     _pwmTarget:	
   204  004C                     	ds	1
   205  004D                     _charPeriod:	
   206  004D                     	ds	1
   207  004E                     _ledMode:	
   208  004E                     	ds	1
   209  004F                     _workMode:	
   210  004F                     	ds	1
   211                           
   212                           	psect	bssBANK1
   213  00A0                     __pbssBANK1:	
   214  00A0                     _timer:	
   215  00A0                     	ds	16
   216  00B0                     ADC_Sample@adsum:	
   217  00B0                     	ds	4
   218  00B4                     _led:	
   219  00B4                     	ds	3
   220  00B7                     _pwmMsCnt:	
   221  00B7                     	ds	2
   222                           
   223                           	psect	clrtext
   224  06CA                     clear_ram0:	
   225                           ;	Called with FSR containing the base address, and
   226                           ;	W with the last address+1
   227                           
   228  06CA  0064               	clrwdt	;clear the watchdog before getting into this loop
   229  06CB                     clrloop0:	
   230  06CB  0180               	clrf	0	;clear RAM location pointed to by FSR
   231  06CC  0A84               	incf	4,f	;increment pointer
   232  06CD  0604               	xorwf	4,w	;XOR with final address
   233  06CE  1903               	btfsc	3,2	;have we reached the end yet?
   234  06CF  3400               	retlw	0	;all done for this memory range, return
   235  06D0  0604               	xorwf	4,w	;XOR again to restore value
   236  06D1  2ECB               	goto	clrloop0	;do the next byte
   237                           
   238                           	psect	cstackCOMMON
   239  0072                     __pcstackCOMMON:	
   240  0072                     ?_MCU_GpioSetToSleep:	
   241  0072                     ?_MCU_Config:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0072                     ?_Standby:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0072                     ?_Work:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0072                     ?_Sleep:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0072                     ?_Charge:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0072                     ?_ADC_Driver:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0072                     ?_MCU_PwmInit:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0072                     ?_MCU_GpioInit:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0072                     ?_MCU_TimerInit:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0072                     ?_MCU_IntInit:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0072                     ?_KEY_Driver:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0072                     ?_KEY_WorkDriver:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0072                     ?_CUP_USB_Driver:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0072                     ?_LED_Display:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0072                     ?_MCU_EnterSleep:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0072                     ?_Motor_ON:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0072                     ?_Motor_OFF:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0072                     ?_Run_State:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0072                     ?_main:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0072                     ?_MCU_AdcInit:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0072                     ?_ADC_Sample:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0072                     ?_MCU_PoweronConfig:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0072                     ?_ISR:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0072                     ??_ISR:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0072                     ?_MCU_Timer0_Init:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0072                     ?_MCU_Timer1_Init:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0072                     ?_MCU_Timer2_Init:	
   320                           ; 1 bytes @ 0x0
   321                           
   322                           
   323                           ; 1 bytes @ 0x0
   324  0072                     	ds	2
   325  0074                     ??_MCU_GpioSetToSleep:	
   326  0074                     ??_MCU_Config:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0074                     ??_Standby:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0074                     ??_Work:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0074                     ??_Charge:	
   336                           ; 1 bytes @ 0x2
   337                           
   338  0074                     ??_MCU_PwmInit:	
   339                           ; 1 bytes @ 0x2
   340                           
   341  0074                     ??_MCU_GpioInit:	
   342                           ; 1 bytes @ 0x2
   343                           
   344  0074                     ??_MCU_TimerInit:	
   345                           ; 1 bytes @ 0x2
   346                           
   347  0074                     ??_MCU_IntInit:	
   348                           ; 1 bytes @ 0x2
   349                           
   350  0074                     ??_KEY_Driver:	
   351                           ; 1 bytes @ 0x2
   352                           
   353  0074                     ??_KEY_WorkDriver:	
   354                           ; 1 bytes @ 0x2
   355                           
   356  0074                     ??_CUP_USB_Driver:	
   357                           ; 1 bytes @ 0x2
   358                           
   359  0074                     ??_LED_Display:	
   360                           ; 1 bytes @ 0x2
   361                           
   362  0074                     ??_Motor_ON:	
   363                           ; 1 bytes @ 0x2
   364                           
   365  0074                     ??_Motor_OFF:	
   366                           ; 1 bytes @ 0x2
   367                           
   368  0074                     ??_MCU_AdcInit:	
   369                           ; 1 bytes @ 0x2
   370                           
   371  0074                     ??_ADC_Sample:	
   372                           ; 1 bytes @ 0x2
   373                           
   374  0074                     ??_MCU_PoweronConfig:	
   375                           ; 1 bytes @ 0x2
   376                           
   377  0074                     ??_MCU_Timer0_Init:	
   378                           ; 1 bytes @ 0x2
   379                           
   380  0074                     ??_MCU_Timer1_Init:	
   381                           ; 1 bytes @ 0x2
   382                           
   383  0074                     ??_MCU_Timer2_Init:	
   384                           ; 1 bytes @ 0x2
   385                           
   386  0074                     ?___wmul:	
   387                           ; 1 bytes @ 0x2
   388                           
   389  0074                     ?___lwdiv:	
   390                           ; 2 bytes @ 0x2
   391                           
   392  0074                     ?___lmul:	
   393                           ; 2 bytes @ 0x2
   394                           
   395  0074                     ___wmul@multiplier:	
   396                           ; 4 bytes @ 0x2
   397                           
   398  0074                     ___lwdiv@divisor:	
   399                           ; 2 bytes @ 0x2
   400                           
   401  0074                     ___lmul@multiplier:	
   402                           ; 2 bytes @ 0x2
   403                           
   404                           
   405                           ; 4 bytes @ 0x2
   406  0074                     	ds	2
   407  0076                     ___wmul@multiplicand:	
   408  0076                     ___lwdiv@dividend:	
   409                           ; 2 bytes @ 0x4
   410                           
   411                           
   412                           ; 2 bytes @ 0x4
   413  0076                     	ds	1
   414  0077                     ??_Sleep:	
   415  0077                     ??_MCU_EnterSleep:	
   416                           ; 1 bytes @ 0x5
   417                           
   418  0077                     ??_Run_State:	
   419                           ; 1 bytes @ 0x5
   420                           
   421                           
   422                           ; 1 bytes @ 0x5
   423  0077                     	ds	1
   424  0078                     ??___wmul:	
   425  0078                     ??___lwdiv:	
   426                           ; 1 bytes @ 0x6
   427                           
   428  0078                     ADC_Sample@adch:	
   429                           ; 1 bytes @ 0x6
   430                           
   431  0078                     ___wmul@product:	
   432                           ; 1 bytes @ 0x6
   433                           
   434  0078                     ___lwdiv@quotient:	
   435                           ; 2 bytes @ 0x6
   436                           
   437  0078                     ___lmul@multiplicand:	
   438                           ; 2 bytes @ 0x6
   439                           
   440                           
   441                           ; 4 bytes @ 0x6
   442  0078                     	ds	1
   443  0079                     ADC_Sample@i:	
   444                           
   445                           ; 1 bytes @ 0x7
   446  0079                     	ds	1
   447  007A                     ___lwdiv@counter:	
   448  007A                     ADC_Sample@ad_temp:	
   449                           ; 1 bytes @ 0x8
   450                           
   451                           
   452                           ; 2 bytes @ 0x8
   453  007A                     	ds	2
   454  007C                     ??_main:	
   455  007C                     ??___lmul:	
   456                           ; 1 bytes @ 0xA
   457                           
   458  007C                     ??___lldiv:	
   459                           ; 1 bytes @ 0xA
   460                           
   461                           
   462                           	psect	cstackBANK0
   463  0050                     __pcstackBANK0:	
   464                           ; 1 bytes @ 0xA
   465                           
   466  0050                     ___lmul@product:	
   467                           
   468                           ; 4 bytes @ 0x0
   469  0050                     	ds	4
   470  0054                     ?___lldiv:	
   471  0054                     ___lldiv@divisor:	
   472                           ; 4 bytes @ 0x4
   473                           
   474                           
   475                           ; 4 bytes @ 0x4
   476  0054                     	ds	4
   477  0058                     ___lldiv@dividend:	
   478                           
   479                           ; 4 bytes @ 0x8
   480  0058                     	ds	4
   481  005C                     ___lldiv@quotient:	
   482                           
   483                           ; 4 bytes @ 0xC
   484  005C                     	ds	4
   485  0060                     ___lldiv@counter:	
   486                           
   487                           ; 1 bytes @ 0x10
   488  0060                     	ds	1
   489  0061                     ??_ADC_Driver:	
   490                           
   491                           ; 1 bytes @ 0x11
   492  0061                     	ds	2
   493  0063                     ADC_Driver@i:	
   494                           
   495                           ; 1 bytes @ 0x13
   496  0063                     	ds	1
   497                           
   498                           	psect	maintext
   499  061D                     __pmaintext:	
   500 ;;
   501 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   502 ;;
   503 ;; *************** function _main *****************
   504 ;; Defined at:
   505 ;;		line 25 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : B00/0
   516 ;;		On exit  : 300/100
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   519 ;;      Params:         0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0
   522 ;;      Totals:         0       0       0       0       0
   523 ;;Total ram usage:        0 bytes
   524 ;; Hardware stack levels required when called:    7
   525 ;; This function calls:
   526 ;;		_ADC_Driver
   527 ;;		_CUP_USB_Driver
   528 ;;		_KEY_Driver
   529 ;;		_KEY_WorkDriver
   530 ;;		_LED_Display
   531 ;;		_MCU_Config
   532 ;;		_MCU_PwmInit
   533 ;;		_Run_State
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _main
   541  061D                     _main:	
   542                           
   543                           ;main.c: 28: MCU_Config();
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   547  061D  118A  24BA  118A   	fcall	_MCU_Config
   548                           
   549                           ;main.c: 30: GIE = 1;
   550  0620  178B               	bsf	11,7	;volatile
   551                           
   552                           ;main.c: 32: ledMode = LM_Redwhite_1HZ_1T;
   553  0621  300A               	movlw	10
   554  0622  1283               	bcf	3,5	;RP0=0, select bank0
   555  0623  00CE               	movwf	_ledMode
   556  0624                     l8149:	
   557                           
   558                           ;main.c: 34: {
   559                           ;main.c: 35: if (gbTime10ms) {
   560  0624  1D70               	btfss	_gbTime10ms/(0+8),_gbTime10ms& (0+7)
   561  0625  2E24               	goto	l8149
   562                           
   563                           ;main.c: 36: gbTime10ms = 0;
   564  0626  1170               	bcf	_gbTime10ms/(0+8),_gbTime10ms& (0+7)
   565  0627  0064               	clrwdt	;# 
   566                           
   567                           ;main.c: 41: if ((RB0==1)){
   568  0628  1283               	bcf	3,5	;RP0=0, select bank0
   569  0629  1303               	bcf	3,6	;RP1=0, select bank0
   570  062A  1C06               	btfss	6,0	;volatile
   571  062B  2E32               	goto	l8155
   572                           
   573                           ;main.c: 42: KEY_Driver();
   574  062C  118A  25DE  118A   	fcall	_KEY_Driver
   575                           
   576                           ;main.c: 43: KEY_WorkDriver();
   577  062F  118A  2666  118A   	fcall	_KEY_WorkDriver
   578  0632                     l8155:	
   579                           
   580                           ;main.c: 44: }
   581                           ;main.c: 45: Run_State();
   582  0632  118A  23B6  118A   	fcall	_Run_State
   583                           
   584                           ;main.c: 46: ADC_Driver();
   585  0635  118A  201E  118A   	fcall	_ADC_Driver
   586                           
   587                           ;main.c: 47: CUP_USB_Driver();
   588  0638  118A  2686  118A   	fcall	_CUP_USB_Driver
   589                           
   590                           ;main.c: 48: LED_Display();
   591  063B  118A  2540  118A   	fcall	_LED_Display
   592                           
   593                           ;main.c: 49: MCU_PwmInit();
   594  063E  118A  2516  118A   	fcall	_MCU_PwmInit
   595  0641  2E24               	goto	l8149
   596  0642                     __end_of_main:	
   597                           
   598                           	psect	swtext1
   599  06B6                     __pswtext1:	
   600  06B6                     S8223:	
   601  06B6  118A  2BCE         	ljmp	l7939
   602  06B8  118A  2BDF         	ljmp	l7947
   603  06BA  118A  2BE0         	ljmp	l7949
   604  06BC  118A  2BE1         	ljmp	l7951
   605  06BE  118A  2BE2         	ljmp	l7953
   606                           
   607                           	psect	text4
   608  02E9                     __ptext4:	
   609 ;; *************** function _Standby *****************
   610 ;; Defined at:
   611 ;;		line 106 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0, pclath, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 200/0
   622 ;;		On exit  : 200/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   625 ;;      Params:         0       0       0       0       0
   626 ;;      Locals:         0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0
   628 ;;      Totals:         0       0       0       0       0
   629 ;;Total ram usage:        0 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    2
   632 ;; This function calls:
   633 ;;		_Motor_OFF
   634 ;; This function is called by:
   635 ;;		_Run_State
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           
   640                           ;psect for function _Standby
   641  02E9                     _Standby:	
   642  02E9                     l7477:	
   643                           ;incstack = 0
   644                           ; Regs used in _Standby: [wreg+status,2+status,0+pclath+cstack]
   645                           
   646                           
   647                           ;function_work.c: 109: Motor_OFF();
   648  02E9  246A  118A         	fcall	_Motor_OFF
   649                           
   650                           ;function_work.c: 110: timer.work = 0;
   651  02EB  1683               	bsf	3,5	;RP0=1, select bank1
   652  02EC  01A6               	clrf	(_timer^(0+128)+6)
   653  02ED  01A7               	clrf	((_timer+1)^(0+128)+6)
   654                           
   655                           ;function_work.c: 113: if (++sleep10sTimeCnt > 2000){
   656  02EE  1283               	bcf	3,5	;RP0=0, select bank0
   657  02EF  0AC8               	incf	_sleep10sTimeCnt,f
   658  02F0  1903               	skipnz
   659  02F1  0AC9               	incf	_sleep10sTimeCnt+1,f
   660  02F2  3007               	movlw	7
   661  02F3  0249               	subwf	_sleep10sTimeCnt+1,w
   662  02F4  30D1               	movlw	209
   663  02F5  1903               	skipnz
   664  02F6  0248               	subwf	_sleep10sTimeCnt,w
   665  02F7  1C03               	skipc
   666  02F8  2AFD               	goto	l7487
   667  02F9  3003               	movlw	3
   668                           
   669                           ;function_work.c: 114: sleep10sTimeCnt = 0;
   670  02FA  01C8               	clrf	_sleep10sTimeCnt
   671  02FB  01C9               	clrf	_sleep10sTimeCnt+1
   672                           
   673                           ;function_work.c: 115: workMode = WM_Sleep;
   674  02FC  00CF               	movwf	_workMode
   675  02FD                     l7487:	
   676                           
   677                           ;function_work.c: 116: }
   678                           ;function_work.c: 118: if (++timer.stanbyCnt>500 && ledMode!=LM_Red_1HZ_10T){
   679  02FD  1683               	bsf	3,5	;RP0=1, select bank1
   680  02FE  0AA4               	incf	(_timer^(0+128)+4),f
   681  02FF  1903               	skipnz
   682  0300  0AA5               	incf	((_timer+1)^(0+128)+4),f
   683  0301  3001               	movlw	1
   684  0302  0225               	subwf	((_timer+1)^(0+128)+4),w
   685  0303  30F5               	movlw	245
   686  0304  1903               	skipnz
   687  0305  0224               	subwf	(_timer^(0+128)+4),w
   688  0306  1C03               	skipc
   689  0307  2B17               	goto	l7493
   690  0308  3008               	movlw	8
   691  0309  1283               	bcf	3,5	;RP0=0, select bank0
   692  030A  064E               	xorwf	_ledMode,w
   693  030B  1903               	btfsc	3,2
   694  030C  2B17               	goto	l7493
   695                           
   696                           ;function_work.c: 119: timer.stanbyCnt = 0;
   697  030D  1683               	bsf	3,5	;RP0=1, select bank1
   698  030E  01A4               	clrf	(_timer^(0+128)+4)
   699  030F  01A5               	clrf	((_timer+1)^(0+128)+4)
   700                           
   701                           ;function_work.c: 120: workMode = WM_Poweroff;
   702  0310  1283               	bcf	3,5	;RP0=0, select bank0
   703  0311  01CF               	clrf	_workMode
   704                           
   705                           ;function_work.c: 121: ledMode = LM_Off;
   706  0312  01CE               	clrf	_ledMode
   707                           
   708                           ;function_work.c: 122: timer.low6_4v3sCnt = 0;
   709  0313  1683               	bsf	3,5	;RP0=1, select bank1
   710  0314  01AE               	clrf	(_timer^(0+128)+14)
   711  0315  01AF               	clrf	((_timer+1)^(0+128)+14)
   712                           
   713                           ;function_work.c: 123: }else{
   714  0316  0008               	return
   715  0317                     l7493:	
   716                           
   717                           ;function_work.c: 124: if (key.sw2Index == 1){
   718  0317  1283               	bcf	3,5	;RP0=0, select bank0
   719  0318  0B3E               	decfsz	_key+3,w
   720  0319  0008               	return
   721                           
   722                           ;function_work.c: 125: if (work.inWorkIndex == 1){
   723  031A  0B46               	decfsz	_work,w
   724  031B  0008               	return
   725                           
   726                           ;function_work.c: 127: if (adc.batTotal > 600){
   727  031C  3002               	movlw	2
   728  031D  0229               	subwf	_adc+9,w
   729  031E  3059               	movlw	89
   730  031F  1903               	skipnz
   731  0320  0228               	subwf	_adc+8,w
   732  0321  1C03               	skipc
   733  0322  2B26               	goto	l7501
   734                           
   735                           ;function_work.c: 128: workMode = WM_Work;
   736  0323  3002               	movlw	2
   737  0324  00CF               	movwf	_workMode
   738                           
   739                           ;function_work.c: 129: }else{
   740  0325  0008               	return
   741  0326                     l7501:	
   742                           
   743                           ;function_work.c: 130: ledMode = LM_Red_1HZ_10T;
   744  0326  3008               	movlw	8
   745  0327  00CE               	movwf	_ledMode
   746  0328  0008               	return
   747  0329                     __end_of_Standby:	
   748  0329                     __ptext18:	
   749 ;; *************** function _Charge *****************
   750 ;; Defined at:
   751 ;;		line 225 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 200/0
   762 ;;		On exit  : 300/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   765 ;;      Params:         0       0       0       0       0
   766 ;;      Locals:         0       0       0       0       0
   767 ;;      Temps:          2       0       0       0       0
   768 ;;      Totals:         2       0       0       0       0
   769 ;;Total ram usage:        2 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    2
   772 ;; This function calls:
   773 ;;		_Motor_OFF
   774 ;; This function is called by:
   775 ;;		_Run_State
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           
   780                           ;psect for function _Charge
   781  0329                     _Charge:	
   782  0329                     l7577:	
   783                           ;incstack = 0
   784                           ; Regs used in _Charge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   785                           
   786                           
   787                           ;function_work.c: 227: Motor_OFF();
   788  0329  246A  118A         	fcall	_Motor_OFF
   789                           
   790                           ;function_work.c: 230: if(pwmTarget == adc.batChar){
   791  032B  084C               	movf	_pwmTarget,w
   792  032C  00F4               	movwf	??_Charge
   793  032D  01F5               	clrf	??_Charge+1
   794  032E  0831               	movf	_adc+17,w
   795  032F  0675               	xorwf	??_Charge+1,w
   796  0330  1D03               	skipz
   797  0331  2B34               	goto	u1135
   798  0332  0830               	movf	_adc+16,w
   799  0333  0674               	xorwf	??_Charge,w
   800  0334                     u1135:	
   801  0334  1D03               	skipz
   802  0335  2B72               	goto	l7621
   803                           
   804                           ;function_work.c: 232: charDisplayCnt = 100;
   805  0336  3064               	movlw	100
   806  0337  00C4               	movwf	_charDisplayCnt
   807  0338  01C5               	clrf	_charDisplayCnt+1
   808  0339  2B72               	goto	l7621
   809  033A                     l7583:	
   810                           
   811                           ;function_work.c: 247: if (adc.batTotal<600){
   812  033A  3002               	movlw	2
   813  033B  0229               	subwf	_adc+9,w
   814  033C  3058               	movlw	88
   815  033D  1903               	skipnz
   816  033E  0228               	subwf	_adc+8,w
   817  033F  1803               	skipnc
   818  0340  2B46               	goto	l7589
   819                           
   820                           ;function_work.c: 249: pwmTarget = 20;
   821  0341  3014               	movlw	20
   822  0342                     L2:	
   823  0342  00CC               	movwf	_pwmTarget
   824                           
   825                           ;function_work.c: 250: ledMode = LM_Red_On;
   826  0343  01CE               	clrf	_ledMode
   827  0344  0ACE               	incf	_ledMode,f
   828                           
   829                           ;function_work.c: 251: }else{
   830  0345  2B7E               	goto	l7623
   831  0346                     l7589:	
   832                           
   833                           ;function_work.c: 252: charPeriod++;
   834  0346  0ACD               	incf	_charPeriod,f
   835  0347  2B7E               	goto	l7623
   836  0348                     l7591:	
   837                           
   838                           ;function_work.c: 257: if (adc.batTotal<800){
   839  0348  3003               	movlw	3
   840  0349  0229               	subwf	_adc+9,w
   841  034A  3020               	movlw	32
   842  034B  1903               	skipnz
   843  034C  0228               	subwf	_adc+8,w
   844  034D  1803               	skipnc
   845  034E  2B46               	goto	l7589
   846                           
   847                           ;function_work.c: 259: pwmTarget = 100;
   848  034F  3064               	movlw	100
   849  0350  2B42               	goto	L2
   850  0351                     l7599:	
   851                           
   852                           ;function_work.c: 267: if (adc.batTotal<820){
   853  0351  3003               	movlw	3
   854  0352  0229               	subwf	_adc+9,w
   855  0353  3034               	movlw	52
   856  0354  1903               	skipnz
   857  0355  0228               	subwf	_adc+8,w
   858  0356  1803               	skipnc
   859  0357  2B46               	goto	l7589
   860                           
   861                           ;function_work.c: 269: pwmTarget = 50;
   862  0358  3032               	movlw	50
   863  0359  2B42               	goto	L2
   864  035A                     l7607:	
   865                           
   866                           ;function_work.c: 277: if (adc.batTotal<835){
   867  035A  3003               	movlw	3
   868  035B  0229               	subwf	_adc+9,w
   869  035C  3043               	movlw	67
   870  035D  1903               	skipnz
   871  035E  0228               	subwf	_adc+8,w
   872  035F  1803               	skipnc
   873  0360  2B46               	goto	l7589
   874                           
   875                           ;function_work.c: 279: pwmTarget = 30;
   876  0361  301E               	movlw	30
   877  0362  00CC               	movwf	_pwmTarget
   878  0363  2B6F               	goto	l7617
   879  0364                     l7613:	
   880                           ;function_work.c: 281: }else{
   881                           
   882                           ;function_work.c: 280: ledMode = LM_white_On;
   883                           
   884                           
   885                           ;function_work.c: 296: if (adc.batTotal>=840){
   886  0364  3003               	movlw	3
   887  0365  0229               	subwf	_adc+9,w
   888  0366  3048               	movlw	72
   889  0367  1903               	skipnz
   890  0368  0228               	subwf	_adc+8,w
   891  0369  1C03               	skipc
   892  036A  2B7E               	goto	l7623
   893                           
   894                           ;function_work.c: 298: pwmTarget = 0;
   895  036B  01CC               	clrf	_pwmTarget
   896                           
   897                           ;function_work.c: 299: adc.pwmDuty = 0;
   898  036C  01B5               	clrf	_adc+21
   899                           
   900                           ;function_work.c: 300: adc.batChar = 0;
   901  036D  01B0               	clrf	_adc+16
   902  036E  01B1               	clrf	_adc+17
   903  036F                     l7617:	
   904                           
   905                           ;function_work.c: 301: ledMode = LM_white_On;
   906  036F  3002               	movlw	2
   907  0370  00CE               	movwf	_ledMode
   908  0371  2B7E               	goto	l7623
   909  0372                     l7621:	
   910  0372  084D               	movf	_charPeriod,w
   911                           
   912                           ; Switch size 1, requested type "speed"
   913                           ; Number of cases is 5, Range of values is 0 to 4
   914                           ; switch strategies available:
   915                           ; Name         Instructions Cycles
   916                           ; direct_byte           17     7 (fixed)
   917                           ; simple_byte           16     9 (average)
   918                           ; jumptable            260     6 (fixed)
   919                           ;	Chosen strategy is direct_byte
   920  0373  0084               	movwf	4
   921  0374  3005               	movlw	5
   922  0375  0204               	subwf	4,w
   923  0376  1803               	skipnc
   924  0377  2B7E               	goto	l7623
   925  0378  3006               	movlw	high S8225
   926  0379  008A               	movwf	10
   927  037A  1003               	clrc
   928  037B  0D04               	rlf	4,w
   929  037C  3EC0               	addlw	low S8225
   930  037D  0082               	movwf	2
   931  037E                     l7623:	
   932                           
   933                           ;function_work.c: 313: if (++pwmMsCnt >= charDisplayCnt){
   934  037E  1683               	bsf	3,5	;RP0=1, select bank1
   935  037F  0AB7               	incf	_pwmMsCnt^(0+128),f
   936  0380  1903               	skipnz
   937  0381  0AB8               	incf	(_pwmMsCnt+1)^(0+128),f
   938  0382  1283               	bcf	3,5	;RP0=0, select bank0
   939  0383  0845               	movf	_charDisplayCnt+1,w
   940  0384  1683               	bsf	3,5	;RP0=1, select bank1
   941  0385  0238               	subwf	(_pwmMsCnt+1)^(0+128),w
   942  0386  1D03               	skipz
   943  0387  2B8C               	goto	u1195
   944  0388  1283               	bcf	3,5	;RP0=0, select bank0
   945  0389  0844               	movf	_charDisplayCnt,w
   946  038A  1683               	bsf	3,5	;RP0=1, select bank1
   947  038B  0237               	subwf	_pwmMsCnt^(0+128),w
   948  038C                     u1195:	
   949  038C  1C03               	skipc
   950  038D  2BAD               	goto	l7637
   951                           
   952                           ;function_work.c: 314: pwmMsCnt = 0;
   953  038E  01B7               	clrf	_pwmMsCnt^(0+128)
   954  038F  01B8               	clrf	(_pwmMsCnt+1)^(0+128)
   955                           
   956                           ;function_work.c: 315: if (pwmTarget != adc.batChar){
   957  0390  1283               	bcf	3,5	;RP0=0, select bank0
   958  0391  084C               	movf	_pwmTarget,w
   959  0392  00F4               	movwf	??_Charge
   960  0393  01F5               	clrf	??_Charge+1
   961  0394  0831               	movf	_adc+17,w
   962  0395  0675               	xorwf	??_Charge+1,w
   963  0396  1D03               	skipz
   964  0397  2B9A               	goto	u1205
   965  0398  0830               	movf	_adc+16,w
   966  0399  0674               	xorwf	??_Charge,w
   967  039A                     u1205:	
   968  039A  1903               	skipnz
   969  039B  2BAD               	goto	l7637
   970                           
   971                           ;function_work.c: 316: if (pwmTarget > adc.batChar){
   972  039C  084C               	movf	_pwmTarget,w
   973  039D  00F4               	movwf	??_Charge
   974  039E  01F5               	clrf	??_Charge+1
   975  039F  0875               	movf	??_Charge+1,w
   976  03A0  0231               	subwf	_adc+17,w
   977  03A1  1D03               	skipz
   978  03A2  2BA5               	goto	u1215
   979  03A3  0874               	movf	??_Charge,w
   980  03A4  0230               	subwf	_adc+16,w
   981  03A5                     u1215:	
   982  03A5  1803               	skipnc
   983  03A6  2BA9               	goto	l7633
   984                           
   985                           ;function_work.c: 317: adc.pwmDuty++;
   986  03A7  0AB5               	incf	_adc+21,f
   987                           
   988                           ;function_work.c: 318: }else{
   989  03A8  2BAD               	goto	l7637
   990  03A9                     l7633:	
   991                           
   992                           ;function_work.c: 319: if (adc.pwmDuty != 0){
   993  03A9  0835               	movf	_adc+21,w
   994  03AA  1903               	btfsc	3,2
   995  03AB  2BAD               	goto	l7637
   996                           
   997                           ;function_work.c: 320: adc.pwmDuty--;
   998  03AC  03B5               	decf	_adc+21,f
   999  03AD                     l7637:	
  1000                           
  1001                           ;function_work.c: 321: }
  1002                           ;function_work.c: 322: }
  1003                           ;function_work.c: 323: }
  1004                           ;function_work.c: 324: }
  1005                           ;function_work.c: 326: if (adc.batChar > 150){
  1006  03AD  3000               	movlw	0
  1007  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  1008  03AF  0231               	subwf	_adc+17,w
  1009  03B0  3097               	movlw	151
  1010  03B1  1903               	skipnz
  1011  03B2  0230               	subwf	_adc+16,w
  1012  03B3  1803               	btfsc	3,0
  1013                           
  1014                           ;function_work.c: 327: adc.pwmDuty = 0;
  1015  03B4  01B5               	clrf	_adc+21
  1016  03B5  0008               	return
  1017  03B6                     __end_of_Charge:	
  1018  03B6                     __ptext1:	
  1019 ;; *************** function _Run_State *****************
  1020 ;; Defined at:
  1021 ;;		line 70 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 200/0
  1032 ;;		On exit  : 200/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1035 ;;      Params:         0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0
  1038 ;;      Totals:         0       0       0       0       0
  1039 ;;Total ram usage:        0 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    6
  1042 ;; This function calls:
  1043 ;;		_Charge
  1044 ;;		_Motor_OFF
  1045 ;;		_Sleep
  1046 ;;		_Standby
  1047 ;;		_Work
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           
  1054                           ;psect for function _Run_State
  1055  03B6                     _Run_State:	
  1056                           
  1057                           ;function_work.c: 72: if (workMode == WM_Work ||workMode == WM_Charge || gFun_ledStopCnt
      +                          !=0){
  1058                           
  1059                           ;incstack = 0
  1060                           ; Regs used in _Run_State: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1061  03B6  3002               	movlw	2
  1062  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  1063  03B8  064F               	xorwf	_workMode,w
  1064  03B9  1903               	btfsc	3,2
  1065  03BA  2BBF               	goto	l7937
  1066  03BB  3004               	movlw	4
  1067  03BC  064F               	xorwf	_workMode,w
  1068  03BD  1D03               	btfss	3,2
  1069  03BE  2BC1               	goto	l7957
  1070  03BF                     l7937:	
  1071                           
  1072                           ;function_work.c: 73: sleep10sTimeCnt = 0;
  1073  03BF  01C8               	clrf	_sleep10sTimeCnt
  1074  03C0  01C9               	clrf	_sleep10sTimeCnt+1
  1075  03C1                     l7957:	
  1076                           ;function_work.c: 97: break;
  1077                           
  1078  03C1  084F               	movf	_workMode,w
  1079                           
  1080                           ; Switch size 1, requested type "speed"
  1081                           ; Number of cases is 5, Range of values is 0 to 4
  1082                           ; switch strategies available:
  1083                           ; Name         Instructions Cycles
  1084                           ; direct_byte           17     7 (fixed)
  1085                           ; simple_byte           16     9 (average)
  1086                           ; jumptable            260     6 (fixed)
  1087                           ;	Chosen strategy is direct_byte
  1088  03C2  0084               	movwf	4
  1089  03C3  3005               	movlw	5
  1090  03C4  0204               	subwf	4,w
  1091  03C5  1803               	skipnc
  1092  03C6  0008               	return
  1093  03C7  3006               	movlw	high S8223
  1094  03C8  008A               	movwf	10
  1095  03C9  1003               	clrc
  1096  03CA  0D04               	rlf	4,w
  1097  03CB  3EB6               	addlw	low S8223
  1098  03CC  0082               	movwf	2
  1099  03CD  0008               	return
  1100  03CE                     l7939:	
  1101                           
  1102                           ;function_work.c: 79: Motor_OFF();
  1103  03CE  246A  118A         	fcall	_Motor_OFF
  1104                           
  1105                           ;function_work.c: 81: if (++sleep10sTimeCnt > 2000){
  1106  03D0  0AC8               	incf	_sleep10sTimeCnt,f
  1107  03D1  1903               	skipnz
  1108  03D2  0AC9               	incf	_sleep10sTimeCnt+1,f
  1109  03D3  3007               	movlw	7
  1110  03D4  0249               	subwf	_sleep10sTimeCnt+1,w
  1111  03D5  30D1               	movlw	209
  1112  03D6  1903               	skipnz
  1113  03D7  0248               	subwf	_sleep10sTimeCnt,w
  1114  03D8  1C03               	skipc
  1115  03D9  0008               	return
  1116  03DA  3003               	movlw	3
  1117                           
  1118                           ;function_work.c: 82: sleep10sTimeCnt = 0;
  1119  03DB  01C8               	clrf	_sleep10sTimeCnt
  1120  03DC  01C9               	clrf	_sleep10sTimeCnt+1
  1121                           
  1122                           ;function_work.c: 83: workMode = WM_Sleep;
  1123  03DD  00CF               	movwf	_workMode
  1124  03DE  0008               	return
  1125  03DF                     l7947:	
  1126                           
  1127                           ;function_work.c: 87: Standby();
  1128  03DF  2AE9               	ljmp	l7477
  1129  03E0                     l7949:	
  1130                           ;function_work.c: 88: break;
  1131                           
  1132                           
  1133                           ;function_work.c: 90: Work();
  1134  03E0  2BE3               	ljmp	l7503
  1135  03E1                     l7951:	
  1136                           ;function_work.c: 91: break;
  1137                           
  1138                           
  1139                           ;function_work.c: 93: Sleep();
  1140  03E1  2C72               	ljmp	l7573
  1141  03E2                     l7953:	
  1142                           ;function_work.c: 94: break;
  1143                           
  1144                           
  1145                           ;function_work.c: 96: Charge();
  1146  03E2  2B29               	ljmp	l7577
  1147  03E3                     __end_of_Run_State:	
  1148  03E3                     __ptext2:	
  1149 ;; *************** function _Work *****************
  1150 ;; Defined at:
  1151 ;;		line 144 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 200/0
  1162 ;;		On exit  : 200/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       0       0       0       0
  1166 ;;      Locals:         0       0       0       0       0
  1167 ;;      Temps:          0       0       0       0       0
  1168 ;;      Totals:         0       0       0       0       0
  1169 ;;Total ram usage:        0 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    2
  1172 ;; This function calls:
  1173 ;;		_Motor_OFF
  1174 ;;		_Motor_ON
  1175 ;; This function is called by:
  1176 ;;		_Run_State
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _Work
  1182  03E3                     _Work:	
  1183  03E3                     l7503:	
  1184                           ;incstack = 0
  1185                           ; Regs used in _Work: [wreg+status,2+status,0+pclath+cstack]
  1186                           
  1187                           
  1188                           ;function_work.c: 148: if (adc.batTotal > 550){
  1189  03E3  3002               	movlw	2
  1190  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  1191  03E5  0229               	subwf	_adc+9,w
  1192  03E6  3027               	movlw	39
  1193  03E7  1903               	skipnz
  1194  03E8  0228               	subwf	_adc+8,w
  1195  03E9  1C03               	skipc
  1196  03EA  2C66               	goto	l7567
  1197                           
  1198                           ;function_work.c: 149: timer.work++;
  1199  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  1200  03EC  0AA6               	incf	(_timer^(0+128)+6),f
  1201  03ED  1903               	skipnz
  1202  03EE  0AA7               	incf	((_timer+1)^(0+128)+6),f
  1203                           
  1204                           ;function_work.c: 150: if (++timer.work < 36000){
  1205  03EF  0AA6               	incf	(_timer^(0+128)+6),f
  1206  03F0  1903               	skipnz
  1207  03F1  0AA7               	incf	((_timer+1)^(0+128)+6),f
  1208  03F2  308C               	movlw	140
  1209  03F3  0227               	subwf	((_timer+1)^(0+128)+6),w
  1210  03F4  30A0               	movlw	160
  1211  03F5  1903               	skipnz
  1212  03F6  0226               	subwf	(_timer^(0+128)+6),w
  1213  03F7  1803               	skipnc
  1214  03F8  2C5C               	goto	l7557
  1215                           
  1216                           ;function_work.c: 151: if ((RB5==0) && timer.ledStopCnt==0){
  1217  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1218  03FA  1A86               	btfsc	6,5	;volatile
  1219  03FB  2C42               	goto	l7545
  1220  03FC  1683               	bsf	3,5	;RP0=1, select bank1
  1221  03FD  082C               	movf	(_timer^(0+128)+12),w
  1222  03FE  042D               	iorwf	((_timer+1)^(0+128)+12),w
  1223  03FF  1D03               	btfss	3,2
  1224  0400  2C42               	goto	l7545
  1225                           
  1226                           ;function_work.c: 152: timer.workStopCnt = 0;
  1227  0401  01A8               	clrf	(_timer^(0+128)+8)
  1228  0402  01A9               	clrf	((_timer+1)^(0+128)+8)
  1229                           
  1230                           ;function_work.c: 153: Motor_ON();
  1231  0403  246E  118A         	fcall	_Motor_ON
  1232                           
  1233                           ;function_work.c: 154: ledMode = LM_white_On;
  1234  0405  3002               	movlw	2
  1235  0406  00CE               	movwf	_ledMode
  1236                           
  1237                           ;function_work.c: 155: if (adc.batTotal<640 && adc.batILoad <=210){
  1238  0407  0229               	subwf	_adc+9,w
  1239  0408  3080               	movlw	128
  1240  0409  1903               	skipnz
  1241  040A  0228               	subwf	_adc+8,w
  1242  040B  3000               	movlw	0
  1243  040C  1803               	skipnc
  1244  040D  2C23               	goto	L1
  1245  040E  022F               	subwf	_adc+15,w
  1246  040F  30D3               	movlw	211
  1247  0410  1903               	skipnz
  1248  0411  022E               	subwf	_adc+14,w
  1249  0412  1803               	skipnc
  1250  0413  2C22               	goto	l1684
  1251                           
  1252                           ;function_work.c: 156: if (++timer.low6_4v3sCnt > 300){
  1253  0414  1683               	bsf	3,5	;RP0=1, select bank1
  1254  0415  0AAE               	incf	(_timer^(0+128)+14),f
  1255  0416  1903               	skipnz
  1256  0417  0AAF               	incf	((_timer+1)^(0+128)+14),f
  1257  0418  3001               	movlw	1
  1258  0419  022F               	subwf	((_timer+1)^(0+128)+14),w
  1259  041A  302D               	movlw	45
  1260  041B  1903               	skipnz
  1261  041C  022E               	subwf	(_timer^(0+128)+14),w
  1262  041D  1C03               	skipc
  1263  041E  2C22               	goto	l1684
  1264                           
  1265                           ;function_work.c: 157: ledMode = LM_white_1Hz;
  1266  041F  3003               	movlw	3
  1267  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1268  0421  00CE               	movwf	_ledMode
  1269  0422                     l1684:	
  1270                           
  1271                           ;function_work.c: 158: }
  1272                           ;function_work.c: 159: }
  1273                           ;function_work.c: 160: if (adc.batILoad >= 216){
  1274  0422  3000               	movlw	0
  1275  0423                     L1:	
  1276  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1277  0424  022F               	subwf	_adc+15,w
  1278  0425  30D8               	movlw	216
  1279  0426  1903               	skipnz
  1280  0427  022E               	subwf	_adc+14,w
  1281  0428  1C03               	skipc
  1282  0429  2C35               	goto	l7535
  1283                           
  1284                           ;function_work.c: 161: if (++work.motorLock >= 200){
  1285  042A  30C8               	movlw	200
  1286  042B  0AC7               	incf	_work+1,f
  1287  042C  0247               	subwf	_work+1,w
  1288  042D  1C03               	skipc
  1289  042E  2C35               	goto	l7535
  1290  042F  3009               	movlw	9
  1291                           
  1292                           ;function_work.c: 162: work.motorLock = 0;
  1293  0430  01C7               	clrf	_work+1
  1294                           
  1295                           ;function_work.c: 163: workMode = WM_Poweroff;
  1296  0431  01CF               	clrf	_workMode
  1297                           
  1298                           ;function_work.c: 164: ledMode = LM_Red_2HZ_10T;
  1299  0432  00CE               	movwf	_ledMode
  1300                           
  1301                           ;function_work.c: 165: Motor_OFF();
  1302  0433  246A  118A         	fcall	_Motor_OFF
  1303  0435                     l7535:	
  1304                           
  1305                           ;function_work.c: 166: }
  1306                           ;function_work.c: 167: }
  1307                           ;function_work.c: 168: if ((RA3==0) && timer.ledStopCnt==0){
  1308  0435  1985               	btfsc	5,3	;volatile
  1309  0436  0008               	return
  1310  0437  1683               	bsf	3,5	;RP0=1, select bank1
  1311  0438  082C               	movf	(_timer^(0+128)+12),w
  1312  0439  042D               	iorwf	((_timer+1)^(0+128)+12),w
  1313  043A  1D03               	btfss	3,2
  1314  043B  0008               	return
  1315                           
  1316                           ;function_work.c: 169: work.motorLock = 0;
  1317  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1318  043D  3006               	movlw	6
  1319  043E  01C7               	clrf	_work+1
  1320                           
  1321                           ;function_work.c: 170: workMode = WM_Poweroff;
  1322  043F  01CF               	clrf	_workMode
  1323                           
  1324                           ;function_work.c: 171: ledMode = LM_Red_1HZ_3T;
  1325  0440  00CE               	movwf	_ledMode
  1326  0441                     l7543:	
  1327                           
  1328                           ;function_work.c: 172: Motor_OFF();
  1329  0441  2C6A               	ljmp	l7475
  1330  0442                     l7545:	
  1331                           
  1332                           ;function_work.c: 176: timer.work = 0;
  1333  0442  1683               	bsf	3,5	;RP0=1, select bank1
  1334  0443  01A6               	clrf	(_timer^(0+128)+6)
  1335  0444  01A7               	clrf	((_timer+1)^(0+128)+6)
  1336                           
  1337                           ;function_work.c: 177: work.motorLock = 0;
  1338  0445  1283               	bcf	3,5	;RP0=0, select bank0
  1339  0446  01C7               	clrf	_work+1
  1340                           
  1341                           ;function_work.c: 178: Motor_OFF();
  1342  0447  246A  118A         	fcall	_Motor_OFF
  1343                           
  1344                           ;function_work.c: 179: ledMode = LM_white_On;
  1345  0449  3002               	movlw	2
  1346  044A  00CE               	movwf	_ledMode
  1347                           
  1348                           ;function_work.c: 180: if (++timer.workStopCnt > 500){
  1349  044B  1683               	bsf	3,5	;RP0=1, select bank1
  1350  044C  0AA8               	incf	(_timer^(0+128)+8),f
  1351  044D  1903               	skipnz
  1352  044E  0AA9               	incf	((_timer+1)^(0+128)+8),f
  1353  044F  3001               	movlw	1
  1354  0450  0229               	subwf	((_timer+1)^(0+128)+8),w
  1355  0451  30F5               	movlw	245
  1356  0452  1903               	skipnz
  1357  0453  0228               	subwf	(_timer^(0+128)+8),w
  1358  0454  1C03               	skipc
  1359  0455  0008               	return
  1360                           
  1361                           ;function_work.c: 181: ledMode = LM_Off;
  1362  0456  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0457  01CE               	clrf	_ledMode
  1364                           
  1365                           ;function_work.c: 182: workMode = WM_Standby;
  1366  0458  01CF               	clrf	_workMode
  1367  0459  0ACF               	incf	_workMode,f
  1368                           
  1369                           ;function_work.c: 183: work.inWorkIndex = 0;
  1370  045A  01C6               	clrf	_work
  1371  045B  0008               	return
  1372  045C                     l7557:	
  1373                           
  1374                           ;function_work.c: 187: Motor_OFF();
  1375  045C  246A               	fcall	_Motor_OFF
  1376                           
  1377                           ;function_work.c: 188: workMode = WM_Standby;
  1378  045D  01CF               	clrf	_workMode
  1379  045E  0ACF               	incf	_workMode,f
  1380                           
  1381                           ;function_work.c: 189: ledMode = LM_Off;
  1382  045F  01CE               	clrf	_ledMode
  1383                           
  1384                           ;function_work.c: 190: timer.work = 0;
  1385  0460  1683               	bsf	3,5	;RP0=1, select bank1
  1386  0461  01A6               	clrf	(_timer^(0+128)+6)
  1387  0462  01A7               	clrf	((_timer+1)^(0+128)+6)
  1388                           
  1389                           ;function_work.c: 191: work.inWorkIndex = 0;
  1390  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0464  01C6               	clrf	_work
  1392                           
  1393                           ;function_work.c: 192: }
  1394                           ;function_work.c: 196: }else{
  1395  0465  0008               	return
  1396  0466                     l7567:	
  1397                           
  1398                           ;function_work.c: 197: ledMode = LM_Red_1HZ_10T;
  1399  0466  3008               	movlw	8
  1400  0467  00CE               	movwf	_ledMode
  1401                           
  1402                           ;function_work.c: 198: workMode = WM_Poweroff;
  1403  0468  01CF               	clrf	_workMode
  1404  0469  2C41               	goto	l7543
  1405  046A                     __end_of_Work:	
  1406  046A                     __ptext19:	
  1407 ;; *************** function _Motor_OFF *****************
  1408 ;; Defined at:
  1409 ;;		line 60 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		None
  1418 ;; Tracked objects:
  1419 ;;		On entry : 200/0
  1420 ;;		On exit  : 300/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         0       0       0       0       0
  1424 ;;      Locals:         0       0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0
  1426 ;;      Totals:         0       0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    1
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_Run_State
  1434 ;;		_Standby
  1435 ;;		_Work
  1436 ;;		_Charge
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           
  1441                           ;psect for function _Motor_OFF
  1442  046A                     _Motor_OFF:	
  1443  046A                     l7475:	
  1444                           ;incstack = 0
  1445                           ; Regs used in _Motor_OFF: []
  1446                           
  1447                           
  1448                           ;function_work.c: 62: RA6=0;
  1449  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1450  046B  1305               	bcf	5,6	;volatile
  1451                           
  1452                           ;function_work.c: 63: RA6=0;
  1453  046C  1305               	bcf	5,6	;volatile
  1454  046D  0008               	return
  1455  046E                     __end_of_Motor_OFF:	
  1456  046E                     __ptext3:	
  1457 ;; *************** function _Motor_ON *****************
  1458 ;; Defined at:
  1459 ;;		line 50 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		None
  1468 ;; Tracked objects:
  1469 ;;		On entry : 300/100
  1470 ;;		On exit  : 300/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1473 ;;      Params:         0       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0
  1476 ;;      Totals:         0       0       0       0       0
  1477 ;;Total ram usage:        0 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    1
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_Work
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           
  1488                           ;psect for function _Motor_ON
  1489  046E                     _Motor_ON:	
  1490                           
  1491                           ;function_work.c: 52: RA6=1;
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _Motor_ON: []
  1495  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1496  046F  1705               	bsf	5,6	;volatile
  1497                           
  1498                           ;function_work.c: 53: RA0=1;
  1499  0470  1405               	bsf	5,0	;volatile
  1500  0471  0008               	return
  1501  0472                     __end_of_Motor_ON:	
  1502  0472                     __ptext5:	
  1503 ;; *************** function _Sleep *****************
  1504 ;; Defined at:
  1505 ;;		line 211 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function_work.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0, pclath, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 200/0
  1516 ;;		On exit  : 300/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1519 ;;      Params:         0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0
  1522 ;;      Totals:         0       0       0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    5
  1526 ;; This function calls:
  1527 ;;		_MCU_EnterSleep
  1528 ;; This function is called by:
  1529 ;;		_Run_State
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           
  1534                           ;psect for function _Sleep
  1535  0472                     _Sleep:	
  1536  0472                     l7573:	
  1537                           ;incstack = 0
  1538                           ; Regs used in _Sleep: [wreg+status,2+status,0+pclath+cstack]
  1539                           
  1540                           
  1541                           ;function_work.c: 213: MCU_EnterSleep();
  1542  0472  2476               	fcall	_MCU_EnterSleep
  1543                           
  1544                           ;function_work.c: 214: workMode = WM_Poweroff;
  1545  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0474  01CF               	clrf	_workMode
  1547  0475  0008               	return
  1548  0476                     __end_of_Sleep:	
  1549  0476                     __ptext6:	
  1550 ;; *************** function _MCU_EnterSleep *****************
  1551 ;; Defined at:
  1552 ;;		line 566 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0, pclath, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 200/0
  1563 ;;		On exit  : 300/100
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1566 ;;      Params:         0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    4
  1573 ;; This function calls:
  1574 ;;		_MCU_Config
  1575 ;;		_MCU_GpioSetToSleep
  1576 ;; This function is called by:
  1577 ;;		_Sleep
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function _MCU_EnterSleep
  1583  0476                     _MCU_EnterSleep:	
  1584                           
  1585                           ;function.c: 568: INTCON = 0;
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _MCU_EnterSleep: [wreg+status,2+status,0+pclath+cstack]
  1589  0476  018B               	clrf	11	;volatile
  1590                           
  1591                           ;function.c: 569: OPTION_REG = 0;
  1592  0477  1683               	bsf	3,5	;RP0=1, select bank1
  1593  0478  0181               	clrf	1	;volatile
  1594                           
  1595                           ;function.c: 570: ADCON0 = 0;
  1596  0479  1283               	bcf	3,5	;RP0=0, select bank0
  1597  047A  019F               	clrf	31	;volatile
  1598                           
  1599                           ;function.c: 571: ADCON1 = 0;
  1600  047B  1683               	bsf	3,5	;RP0=1, select bank1
  1601  047C  019F               	clrf	31	;volatile
  1602                           
  1603                           ;function.c: 572: PWMCON0 = 0;
  1604  047D  1283               	bcf	3,5	;RP0=0, select bank2
  1605  047E  1703               	bsf	3,6	;RP1=1, select bank2
  1606  047F  0187               	clrf	7	;volatile
  1607                           
  1608                           ;function.c: 573: WDTCON = 0;
  1609  0480  0185               	clrf	5	;volatile
  1610                           
  1611                           ;function.c: 574: PWMCON0 = 0x00;
  1612  0481  0187               	clrf	7	;volatile
  1613                           
  1614                           ;function.c: 580: MCU_GpioSetToSleep();
  1615  0482  2494  118A         	fcall	_MCU_GpioSetToSleep
  1616                           
  1617                           ;function.c: 582: PEIE = 1;
  1618  0484  170B               	bsf	11,6	;volatile
  1619                           
  1620                           ;function.c: 583: RAIE = 1;
  1621  0485  1303               	bcf	3,6	;RP1=0, select bank1
  1622  0486  178C               	bsf	12,7	;volatile
  1623                           
  1624                           ;function.c: 584: RBIE = 1;
  1625  0487  158B               	bsf	11,3	;volatile
  1626                           
  1627                           ;function.c: 585: GIE = 1;
  1628  0488  178B               	bsf	11,7	;volatile
  1629                           
  1630                           ;function.c: 587: PORTA;
  1631  0489  1283               	bcf	3,5	;RP0=0, select bank0
  1632  048A  0805               	movf	5,w	;volatile
  1633                           
  1634                           ;function.c: 588: PORTB;
  1635  048B  0806               	movf	6,w	;volatile
  1636                           
  1637                           ;function.c: 589: RAIF = 0;
  1638  048C  138C               	bcf	12,7	;volatile
  1639                           
  1640                           ;function.c: 590: RBIF = 0;
  1641  048D  100B               	bcf	11,0	;volatile
  1642  048E  0064               	clrwdt	;# 
  1643  048F  0063               	sleep	;# 
  1644  0490  0000               	nop	;# 
  1645                           
  1646                           ;function.c: 598: gFun_keyIdleCnt = 255;
  1647  0491  24BA               	fcall	_MCU_Config
  1648                           
  1649                           ;function.c: 599: GIE = 1;
  1650  0492  178B               	bsf	11,7	;volatile
  1651  0493  0008               	return
  1652  0494                     __end_of_MCU_EnterSleep:	
  1653  0494                     __ptext7:	
  1654 ;; *************** function _MCU_GpioSetToSleep *****************
  1655 ;; Defined at:
  1656 ;;		line 54 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_gpio.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg
  1665 ;; Tracked objects:
  1666 ;;		On entry : 300/200
  1667 ;;		On exit  : 300/300
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1670 ;;      Params:         0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    1
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_MCU_EnterSleep
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _MCU_GpioSetToSleep
  1686  0494                     _MCU_GpioSetToSleep:	
  1687                           
  1688                           ;mcu_gpio.c: 63: PORTA = ( ((1)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<
      +                          2) | ((1)<<1) | (0));
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in _MCU_GpioSetToSleep: [wreg]
  1692  0494  308A               	movlw	138
  1693  0495  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0496  0085               	movwf	5	;volatile
  1695                           
  1696                           ;mcu_gpio.c: 64: TRISA = ( ((1)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((1)<<3) | ((1)<<
      +                          2) | ((0)<<1) | (0));
  1697  0497  30BC               	movlw	188
  1698  0498  1683               	bsf	3,5	;RP0=1, select bank1
  1699  0499  0085               	movwf	5	;volatile
  1700                           
  1701                           ;mcu_gpio.c: 65: WPUA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1702  049A  3008               	movlw	8
  1703  049B  1703               	bsf	3,6	;RP1=1, select bank3
  1704  049C  008E               	movwf	14	;volatile
  1705                           
  1706                           ;mcu_gpio.c: 66: WPDA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1707  049D  3001               	movlw	1
  1708  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1709  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1710  04A0  0087               	movwf	7	;volatile
  1711                           
  1712                           ;mcu_gpio.c: 67: IOCA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1713  04A1  3008               	movlw	8
  1714  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  1715  04A3  0087               	movwf	7	;volatile
  1716                           
  1717                           ;mcu_gpio.c: 68: ANSEL = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((0)<<3) | ((1)<<
      +                          2) | ((0)<<1) | (0));
  1718  04A4  3034               	movlw	52
  1719  04A5  1703               	bsf	3,6	;RP1=1, select bank3
  1720  04A6  0088               	movwf	8	;volatile
  1721                           
  1722                           ;mcu_gpio.c: 72: PORTB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((0)<<3) | ((0)<<
      +                          2) | ((0)<<1) | (1));
  1723  04A7  3031               	movlw	49
  1724  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1725  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  1726  04AA  0086               	movwf	6	;volatile
  1727                           
  1728                           ;mcu_gpio.c: 73: TRISB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<
      +                          2) | ((1)<<1) | (1));
  1729  04AB  3023               	movlw	35
  1730  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  1731  04AD  0086               	movwf	6	;volatile
  1732                           
  1733                           ;mcu_gpio.c: 74: WPUB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1734  04AE  3021               	movlw	33
  1735  04AF  0095               	movwf	21	;volatile
  1736                           
  1737                           ;mcu_gpio.c: 75: WPDB = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1738  04B0  3008               	movlw	8
  1739  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  1740  04B2  0088               	movwf	8	;volatile
  1741                           
  1742                           ;mcu_gpio.c: 76: IOCB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1743  04B3  3021               	movlw	33
  1744  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  1745  04B5  0096               	movwf	22	;volatile
  1746                           
  1747                           ;mcu_gpio.c: 77: ANSELH = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | ((0)<
      +                          <2) | ((1)<<1) | (0));
  1748  04B6  3002               	movlw	2
  1749  04B7  1703               	bsf	3,6	;RP1=1, select bank3
  1750  04B8  0089               	movwf	9	;volatile
  1751  04B9  0008               	return
  1752  04BA                     __end_of_MCU_GpioSetToSleep:	
  1753  04BA                     __ptext8:	
  1754 ;; *************** function _MCU_Config *****************
  1755 ;; Defined at:
  1756 ;;		line 130 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_config.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0, pclath, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 300/100
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         0       0       0       0       0
  1771 ;;      Locals:         0       0       0       0       0
  1772 ;;      Temps:          3       0       0       0       0
  1773 ;;      Totals:         3       0       0       0       0
  1774 ;;Total ram usage:        3 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    3
  1777 ;; This function calls:
  1778 ;;		_MCU_AdcInit
  1779 ;;		_MCU_GpioInit
  1780 ;;		_MCU_IntInit
  1781 ;;		_MCU_PoweronConfig
  1782 ;;		_MCU_PwmInit
  1783 ;;		_MCU_TimerInit
  1784 ;; This function is called by:
  1785 ;;		_MCU_EnterSleep
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _MCU_Config
  1792  04BA                     _MCU_Config:	
  1793                           
  1794                           ;mcu_config.c: 132: _delay((unsigned long)((100)*(16000000/4000.0)));
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _MCU_Config: [wreg+status,2+status,0+pclath+cstack]
  1798  04BA  3003               	movlw	3
  1799  04BB  00F6               	movwf	??_MCU_Config+2
  1800  04BC  3008               	movlw	8
  1801  04BD  00F5               	movwf	??_MCU_Config+1
  1802  04BE  3077               	movlw	119
  1803  04BF  00F4               	movwf	??_MCU_Config
  1804  04C0                     u2137:	
  1805  04C0  0BF4               	decfsz	??_MCU_Config,f
  1806  04C1  2CC0               	goto	u2137
  1807  04C2  0BF5               	decfsz	??_MCU_Config+1,f
  1808  04C3  2CC0               	goto	u2137
  1809  04C4  0BF6               	decfsz	??_MCU_Config+2,f
  1810  04C5  2CC0               	goto	u2137
  1811                           
  1812                           ;mcu_config.c: 133: MCU_PoweronConfig();
  1813  04C6  24FF  118A         	fcall	_MCU_PoweronConfig
  1814                           
  1815                           ;mcu_config.c: 135: MCU_GpioInit();
  1816  04C8  24D1  118A         	fcall	_MCU_GpioInit
  1817                           
  1818                           ;mcu_config.c: 136: MCU_TimerInit();
  1819  04CA  2506  118A         	fcall	_MCU_TimerInit
  1820                           
  1821                           ;mcu_config.c: 137: MCU_IntInit();
  1822  04CC  24F5  118A         	fcall	_MCU_IntInit
  1823                           
  1824                           ;mcu_config.c: 138: MCU_PwmInit();
  1825  04CE  2516  118A         	fcall	_MCU_PwmInit
  1826                           
  1827                           ;mcu_config.c: 139: MCU_AdcInit();
  1828  04D0  2D0F               	ljmp	l7409
  1829  04D1                     __end_of_MCU_Config:	
  1830  04D1                     __ptext16:	
  1831 ;; *************** function _MCU_GpioInit *****************
  1832 ;; Defined at:
  1833 ;;		line 20 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_gpio.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;		None
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2
  1842 ;; Tracked objects:
  1843 ;;		On entry : 300/100
  1844 ;;		On exit  : 300/300
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1847 ;;      Params:         0       0       0       0       0
  1848 ;;      Locals:         0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0
  1850 ;;      Totals:         0       0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_MCU_Config
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           
  1862                           ;psect for function _MCU_GpioInit
  1863  04D1                     _MCU_GpioInit:	
  1864                           
  1865                           ;mcu_gpio.c: 29: PORTA = ( ((1)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<
      +                          2) | ((1)<<1) | (0));
  1866                           
  1867                           ;incstack = 0
  1868                           ; Regs used in _MCU_GpioInit: [wreg+status,2]
  1869  04D1  308A               	movlw	138
  1870  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1871  04D3  0085               	movwf	5	;volatile
  1872                           
  1873                           ;mcu_gpio.c: 30: TRISA = ( ((1)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((1)<<3) | ((1)<<
      +                          2) | ((0)<<1) | (0));
  1874  04D4  30BC               	movlw	188
  1875  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  1876  04D6  0085               	movwf	5	;volatile
  1877                           
  1878                           ;mcu_gpio.c: 31: WPUA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1879  04D7  3008               	movlw	8
  1880  04D8  1703               	bsf	3,6	;RP1=1, select bank3
  1881  04D9  008E               	movwf	14	;volatile
  1882                           
  1883                           ;mcu_gpio.c: 32: WPDA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1884  04DA  3001               	movlw	1
  1885  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  1886  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  1887  04DD  0087               	movwf	7	;volatile
  1888                           
  1889                           ;mcu_gpio.c: 33: IOCA = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1890  04DE  3008               	movlw	8
  1891  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  1892  04E0  0087               	movwf	7	;volatile
  1893                           
  1894                           ;mcu_gpio.c: 34: ANSEL = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((0)<<3) | ((1)<<
      +                          2) | ((0)<<1) | (0));
  1895  04E1  3034               	movlw	52
  1896  04E2  1703               	bsf	3,6	;RP1=1, select bank3
  1897  04E3  0088               	movwf	8	;volatile
  1898                           
  1899                           ;mcu_gpio.c: 38: PORTB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((1)<<4) | ((0)<<3) | ((0)<<
      +                          2) | ((0)<<1) | (1));
  1900  04E4  3031               	movlw	49
  1901  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1902  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1903  04E7  0086               	movwf	6	;volatile
  1904                           
  1905                           ;mcu_gpio.c: 39: TRISB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<
      +                          2) | ((1)<<1) | (1));
  1906  04E8  3023               	movlw	35
  1907  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  1908  04EA  0086               	movwf	6	;volatile
  1909                           
  1910                           ;mcu_gpio.c: 40: WPUB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1911  04EB  3021               	movlw	33
  1912  04EC  0095               	movwf	21	;volatile
  1913                           
  1914                           ;mcu_gpio.c: 41: WPDB = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (0));
  1915  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  1916  04EE  0188               	clrf	8	;volatile
  1917                           
  1918                           ;mcu_gpio.c: 42: IOCB = ( ((0)<<7) | ((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | ((0)<<2
      +                          ) | ((0)<<1) | (1));
  1919  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  1920  04F0  0096               	movwf	22	;volatile
  1921                           
  1922                           ;mcu_gpio.c: 43: ANSELH = ( ((0)<<7) | ((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | ((0)<
      +                          <2) | ((1)<<1) | (0));
  1923  04F1  3002               	movlw	2
  1924  04F2  1703               	bsf	3,6	;RP1=1, select bank3
  1925  04F3  0089               	movwf	9	;volatile
  1926  04F4  0008               	return
  1927  04F5                     __end_of_MCU_GpioInit:	
  1928  04F5                     __ptext15:	
  1929 ;; *************** function _MCU_IntInit *****************
  1930 ;; Defined at:
  1931 ;;		line 21 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_int.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2
  1940 ;; Tracked objects:
  1941 ;;		On entry : 300/0
  1942 ;;		On exit  : 300/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1945 ;;      Params:         0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0
  1948 ;;      Totals:         0       0       0       0       0
  1949 ;;Total ram usage:        0 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    1
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_MCU_Config
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           
  1960                           ;psect for function _MCU_IntInit
  1961  04F5                     _MCU_IntInit:	
  1962                           
  1963                           ;mcu_int.c: 42: INTCON = (1<<6);
  1964                           
  1965                           ;incstack = 0
  1966                           ; Regs used in _MCU_IntInit: [wreg+status,2]
  1967  04F5  3040               	movlw	64
  1968  04F6  008B               	movwf	11	;volatile
  1969                           
  1970                           ;mcu_int.c: 58: PIE1 = (1<<1);
  1971  04F7  3002               	movlw	2
  1972  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  1973  04F9  008C               	movwf	12	;volatile
  1974                           
  1975                           ;mcu_int.c: 64: PIE2 = 0;
  1976  04FA  018D               	clrf	13	;volatile
  1977                           
  1978                           ;mcu_int.c: 84: PIR1 = 0;
  1979  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  1980  04FC  018C               	clrf	12	;volatile
  1981                           
  1982                           ;mcu_int.c: 88: PIR2 = 0;
  1983  04FD  018D               	clrf	13	;volatile
  1984  04FE  0008               	return
  1985  04FF                     __end_of_MCU_IntInit:	
  1986  04FF                     __ptext14:	
  1987 ;; *************** function _MCU_PoweronConfig *****************
  1988 ;; Defined at:
  1989 ;;		line 40 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_config.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 300/100
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2003 ;;      Params:         0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0
  2006 ;;      Totals:         0       0       0       0       0
  2007 ;;Total ram usage:        0 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_MCU_Config
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _MCU_PoweronConfig
  2019  04FF                     _MCU_PoweronConfig:	
  2020                           
  2021                           ;mcu_config.c: 65: OSCCON = (7<<4) | (1<<0);
  2022                           
  2023                           ;incstack = 0
  2024                           ; Regs used in _MCU_PoweronConfig: [wreg]
  2025  04FF  3071               	movlw	113
  2026  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2027  0501  1303               	bcf	3,6	;RP1=0, select bank1
  2028  0502  008F               	movwf	15	;volatile
  2029                           
  2030                           ;mcu_config.c: 122: OPTION_REG = (7<<0) | (1<<3);
  2031  0503  300F               	movlw	15
  2032  0504  0081               	movwf	1	;volatile
  2033  0505  0008               	return
  2034  0506                     __end_of_MCU_PoweronConfig:	
  2035  0506                     __ptext9:	
  2036 ;; *************** function _MCU_TimerInit *****************
  2037 ;; Defined at:
  2038 ;;		line 144 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_timer.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;		None
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, pclath, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 300/300
  2049 ;;		On exit  : 300/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2052 ;;      Params:         0       0       0       0       0
  2053 ;;      Locals:         0       0       0       0       0
  2054 ;;      Temps:          0       0       0       0       0
  2055 ;;      Totals:         0       0       0       0       0
  2056 ;;Total ram usage:        0 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    2
  2059 ;; This function calls:
  2060 ;;		_MCU_Timer0_Init
  2061 ;;		_MCU_Timer1_Init
  2062 ;;		_MCU_Timer2_Init
  2063 ;; This function is called by:
  2064 ;;		_MCU_Config
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           
  2069                           ;psect for function _MCU_TimerInit
  2070  0506                     _MCU_TimerInit:	
  2071                           
  2072                           ;mcu_timer.c: 146: MCU_Timer0_Init();
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in _MCU_TimerInit: [wreg+status,2+status,0+pclath+cstack]
  2076  0506  250B  118A         	fcall	_MCU_Timer0_Init
  2077                           
  2078                           ;mcu_timer.c: 147: MCU_Timer1_Init();
  2079  0508  252C  118A         	fcall	_MCU_Timer1_Init
  2080                           
  2081                           ;mcu_timer.c: 148: MCU_Timer2_Init();
  2082  050A  2D2D               	ljmp	l7395
  2083  050B                     __end_of_MCU_TimerInit:	
  2084  050B                     __ptext12:	
  2085 ;; *************** function _MCU_Timer0_Init *****************
  2086 ;; Defined at:
  2087 ;;		line 21 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_timer.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		status,2
  2096 ;; Tracked objects:
  2097 ;;		On entry : 300/300
  2098 ;;		On exit  : 300/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2101 ;;      Params:         0       0       0       0       0
  2102 ;;      Locals:         0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0
  2104 ;;      Totals:         0       0       0       0       0
  2105 ;;Total ram usage:        0 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    1
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_MCU_TimerInit
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _MCU_Timer0_Init
  2117  050B                     _MCU_Timer0_Init:	
  2118                           
  2119                           ;mcu_timer.c: 26: TMR0 = 0;
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _MCU_Timer0_Init: [status,2]
  2123  050B  1283               	bcf	3,5	;RP0=0, select bank0
  2124  050C  1303               	bcf	3,6	;RP1=0, select bank0
  2125  050D  0181               	clrf	1	;volatile
  2126  050E  0008               	return
  2127  050F                     __end_of_MCU_Timer0_Init:	
  2128  050F                     __ptext17:	
  2129 ;; *************** function _MCU_AdcInit *****************
  2130 ;; Defined at:
  2131 ;;		line 23 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_adc.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg
  2140 ;; Tracked objects:
  2141 ;;		On entry : 300/100
  2142 ;;		On exit  : 300/100
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    1
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_MCU_Config
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _MCU_AdcInit
  2161  050F                     _MCU_AdcInit:	
  2162  050F                     l7409:	
  2163                           ;incstack = 0
  2164                           ; Regs used in _MCU_AdcInit: [wreg]
  2165                           
  2166                           
  2167                           ;mcu_adc.c: 92: ADCON0 = (1<<6) | (1<<0);
  2168  050F  3041               	movlw	65
  2169  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2170  0511  009F               	movwf	31	;volatile
  2171                           
  2172                           ;mcu_adc.c: 94: ADCON1 = (0<<7) | (1<<2) | (1<<0);
  2173  0512  3005               	movlw	5
  2174  0513  1683               	bsf	3,5	;RP0=1, select bank1
  2175  0514  009F               	movwf	31	;volatile
  2176  0515  0008               	return
  2177  0516                     __end_of_MCU_AdcInit:	
  2178  0516                     __ptext13:	
  2179 ;; *************** function _MCU_PwmInit *****************
  2180 ;; Defined at:
  2181 ;;		line 23 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_pwm.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2
  2190 ;; Tracked objects:
  2191 ;;		On entry : 300/0
  2192 ;;		On exit  : 300/100
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2195 ;;      Params:         0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0
  2198 ;;      Totals:         0       0       0       0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;;		_MCU_Config
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           
  2211                           ;psect for function _MCU_PwmInit
  2212  0516                     _MCU_PwmInit:	
  2213                           
  2214                           ;mcu_pwm.c: 25: TRISA7 = 1;
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in _MCU_PwmInit: [wreg+status,2]
  2218  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2219  0517  1785               	bsf	5,7	;volatile
  2220                           
  2221                           ;mcu_pwm.c: 26: PWMCON0 = 0b00000100;
  2222  0518  3004               	movlw	4
  2223  0519  1283               	bcf	3,5	;RP0=0, select bank2
  2224  051A  1703               	bsf	3,6	;RP1=1, select bank2
  2225  051B  0087               	movwf	7	;volatile
  2226                           
  2227                           ;mcu_pwm.c: 27: PWMTL = 128;
  2228  051C  3080               	movlw	128
  2229  051D  1683               	bsf	3,5	;RP0=1, select bank3
  2230  051E  008F               	movwf	15	;volatile
  2231                           
  2232                           ;mcu_pwm.c: 28: PWMTH = 0x00;
  2233  051F  0190               	clrf	16	;volatile
  2234                           
  2235                           ;mcu_pwm.c: 29: PWMD2L = adc.pwmDuty;
  2236  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0522  0835               	movf	_adc+21,w
  2239  0523  1683               	bsf	3,5	;RP0=1, select bank3
  2240  0524  1703               	bsf	3,6	;RP1=1, select bank3
  2241  0525  0095               	movwf	21	;volatile
  2242                           
  2243                           ;mcu_pwm.c: 30: PWMD23H = 0;
  2244  0526  1283               	bcf	3,5	;RP0=0, select bank2
  2245  0527  019D               	clrf	29	;volatile
  2246                           
  2247                           ;mcu_pwm.c: 31: TRISA7 = 0;
  2248  0528  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0529  1303               	bcf	3,6	;RP1=0, select bank1
  2250  052A  1385               	bcf	5,7	;volatile
  2251  052B  0008               	return
  2252  052C                     __end_of_MCU_PwmInit:	
  2253  052C                     __ptext11:	
  2254 ;; *************** function _MCU_Timer1_Init *****************
  2255 ;; Defined at:
  2256 ;;		line 34 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_timer.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;		None
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;		None
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      void 
  2263 ;; Registers used:
  2264 ;;		None
  2265 ;; Tracked objects:
  2266 ;;		On entry : 300/0
  2267 ;;		On exit  : 300/0
  2268 ;;		Unchanged: 300/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2270 ;;      Params:         0       0       0       0       0
  2271 ;;      Locals:         0       0       0       0       0
  2272 ;;      Temps:          0       0       0       0       0
  2273 ;;      Totals:         0       0       0       0       0
  2274 ;;Total ram usage:        0 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_MCU_TimerInit
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _MCU_Timer1_Init
  2286  052C                     _MCU_Timer1_Init:	
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in _MCU_Timer1_Init: []
  2290  052C  0008               	return
  2291  052D                     __end_of_MCU_Timer1_Init:	
  2292  052D                     __ptext10:	
  2293 ;; *************** function _MCU_Timer2_Init *****************
  2294 ;; Defined at:
  2295 ;;		line 79 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_timer.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg
  2304 ;; Tracked objects:
  2305 ;;		On entry : 300/0
  2306 ;;		On exit  : 300/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2309 ;;      Params:         0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    1
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_MCU_TimerInit
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _MCU_Timer2_Init
  2325  052D                     _MCU_Timer2_Init:	
  2326  052D                     l7395:	
  2327                           ;incstack = 0
  2328                           ; Regs used in _MCU_Timer2_Init: [wreg]
  2329                           
  2330  052D  0000               	nop	;# 
  2331  052E  0064               	clrwdt	;# 
  2332                           
  2333                           ;mcu_timer.c: 130: TMR2IF = 0;
  2334  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0531  108C               	bcf	12,1	;volatile
  2337                           
  2338                           ;mcu_timer.c: 131: TMR2IE = 1;
  2339  0532  1683               	bsf	3,5	;RP0=1, select bank1
  2340  0533  148C               	bsf	12,1	;volatile
  2341                           
  2342                           ;mcu_timer.c: 132: T2CON = (0 <<3) | (1<<0) | (1<<2);
  2343  0534  3005               	movlw	5
  2344  0535  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0536  0092               	movwf	18	;volatile
  2346                           
  2347                           ;mcu_timer.c: 133: PR2 = 100;
  2348  0537  3064               	movlw	100
  2349  0538  1683               	bsf	3,5	;RP0=1, select bank1
  2350  0539  0092               	movwf	18	;volatile
  2351                           
  2352                           ;mcu_timer.c: 134: TMR2 = 1;
  2353  053A  3001               	movlw	1
  2354  053B  1283               	bcf	3,5	;RP0=0, select bank0
  2355  053C  0091               	movwf	17	;volatile
  2356                           
  2357                           ;mcu_timer.c: 135: INTCON = 0XC0;
  2358  053D  30C0               	movlw	192
  2359  053E  008B               	movwf	11	;volatile
  2360  053F  0008               	return
  2361  0540                     __end_of_MCU_Timer2_Init:	
  2362                           
  2363                           	psect	swtext2
  2364  06C0                     __pswtext2:	
  2365  06C0                     S8225:	
  2366  06C0  118A  2B3A         	ljmp	l7583
  2367  06C2  118A  2B48         	ljmp	l7591
  2368  06C4  118A  2B51         	ljmp	l7599
  2369  06C6  118A  2B5A         	ljmp	l7607
  2370  06C8  118A  2B64         	ljmp	l7613
  2371                           
  2372                           	psect	text20
  2373  0540                     __ptext20:	
  2374 ;; *************** function _LED_Display *****************
  2375 ;; Defined at:
  2376 ;;		line 161 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 300/0
  2387 ;;		On exit  : 300/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2390 ;;      Params:         0       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0
  2393 ;;      Totals:         0       0       0       0       0
  2394 ;;Total ram usage:        0 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_main
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _LED_Display
  2406  0540                     _LED_Display:	
  2407                           
  2408                           ;function.c: 164: if (led.tempBank != ledMode){
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _LED_Display: [wreg-fsr0h+status,2+status,0]
  2412  0540  1683               	bsf	3,5	;RP0=1, select bank1
  2413  0541  0836               	movf	(_led^(0+128)+2),w
  2414  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0543  064E               	xorwf	_ledMode,w
  2416  0544  1903               	skipnz
  2417  0545  2D4B               	goto	l7857
  2418                           
  2419                           ;function.c: 165: gbLed1hz = 0;
  2420  0546  1270               	bcf	_gbLed1hz/(0+8),_gbLed1hz& (0+7)
  2421                           
  2422                           ;function.c: 166: gbLed2hz = 0;
  2423  0547  11F0               	bcf	_gbLed2hz/(0+8),_gbLed2hz& (0+7)
  2424                           
  2425                           ;function.c: 167: timer.ledStopCnt = 0;
  2426  0548  1683               	bsf	3,5	;RP0=1, select bank1
  2427  0549  01AC               	clrf	(_timer^(0+128)+12)
  2428  054A  01AD               	clrf	((_timer+1)^(0+128)+12)
  2429  054B                     l7857:	
  2430                           
  2431                           ;function.c: 169: }
  2432                           ;function.c: 170: led.tempBank = ledMode;
  2433  054B  1283               	bcf	3,5	;RP0=0, select bank0
  2434  054C  084E               	movf	_ledMode,w
  2435  054D  1683               	bsf	3,5	;RP0=1, select bank1
  2436  054E  00B6               	movwf	(_led^(0+128)+2)
  2437                           
  2438                           ;function.c: 172: if (ledMode == LM_Off){
  2439  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0550  084E               	movf	_ledMode,w
  2441  0551  1D03               	btfss	3,2
  2442  0552  2D56               	goto	l7863
  2443                           
  2444                           ;function.c: 173: timer.ledStopTime = 0;
  2445  0553  1683               	bsf	3,5	;RP0=1, select bank1
  2446  0554  01AA               	clrf	(_timer^(0+128)+10)
  2447  0555  2D5D               	goto	L3
  2448  0556                     l7863:	
  2449                           ;function.c: 174: }else if (ledMode == LM_Redwhite_1HZ_1T){
  2450                           
  2451  0556  300A               	movlw	10
  2452  0557  064E               	xorwf	_ledMode,w
  2453  0558  1D03               	btfss	3,2
  2454  0559  2D5F               	goto	l7867
  2455                           
  2456                           ;function.c: 175: timer.ledStopTime = 100;
  2457  055A  3064               	movlw	100
  2458  055B  1683               	bsf	3,5	;RP0=1, select bank1
  2459  055C  00AA               	movwf	(_timer^(0+128)+10)
  2460  055D                     L3:	
  2461  055D  01AB               	clrf	((_timer+1)^(0+128)+10)
  2462                           
  2463                           ;function.c: 176: }else if(ledMode==LM_white_1Hz_3T || ledMode==LM_Red_1HZ_3T){
  2464  055E  2D7F               	goto	l787
  2465  055F                     l7867:	
  2466  055F  3005               	movlw	5
  2467  0560  064E               	xorwf	_ledMode,w
  2468  0561  1903               	btfsc	3,2
  2469  0562  2D67               	goto	l7871
  2470  0563  3006               	movlw	6
  2471  0564  064E               	xorwf	_ledMode,w
  2472  0565  1D03               	btfss	3,2
  2473  0566  2D69               	goto	l7873
  2474  0567                     l7871:	
  2475                           
  2476                           ;function.c: 177: timer.ledStopTime = 300;
  2477  0567  302C               	movlw	44
  2478  0568  2D72               	goto	L4
  2479  0569                     l7873:	
  2480                           ;function.c: 178: }else if(ledMode == LM_white_1Hz_3T){
  2481                           
  2482  0569  3005               	movlw	5
  2483  056A  064E               	xorwf	_ledMode,w
  2484  056B  1903               	btfsc	3,2
  2485  056C  2D67               	goto	l7871
  2486  056D  3009               	movlw	9
  2487  056E  064E               	xorwf	_ledMode,w
  2488  056F  1D03               	btfss	3,2
  2489  0570  2D76               	goto	l7881
  2490                           
  2491                           ;function.c: 181: timer.ledStopTime = 500;
  2492  0571  30F4               	movlw	244
  2493  0572                     L4:	
  2494  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2495  0573  00AA               	movwf	(_timer^(0+128)+10)
  2496  0574  3001               	movlw	1
  2497  0575  2D7E               	goto	L5
  2498  0576                     l7881:	
  2499                           ;function.c: 182: }else if(ledMode == LM_Red_1HZ_10T){
  2500                           
  2501  0576  3008               	movlw	8
  2502  0577  064E               	xorwf	_ledMode,w
  2503  0578  1D03               	btfss	3,2
  2504  0579  2D7F               	goto	l787
  2505                           
  2506                           ;function.c: 183: timer.ledStopTime = 1000;
  2507  057A  30E8               	movlw	232
  2508  057B  1683               	bsf	3,5	;RP0=1, select bank1
  2509  057C  00AA               	movwf	(_timer^(0+128)+10)
  2510  057D  3003               	movlw	3
  2511  057E                     L5:	
  2512  057E  00AB               	movwf	(_timer^(0+128)+11)
  2513  057F                     l787:	
  2514                           
  2515                           ;function.c: 184: }
  2516                           ;function.c: 187: if (timer.ledStopTime != timer.ledStopCnt){
  2517  057F  1683               	bsf	3,5	;RP0=1, select bank1
  2518  0580  082D               	movf	((_timer+1)^(0+128)+12),w
  2519  0581  062B               	xorwf	((_timer+1)^(0+128)+10),w
  2520  0582  1D03               	skipz
  2521  0583  2D86               	goto	u1765
  2522  0584  082C               	movf	(_timer^(0+128)+12),w
  2523  0585  062A               	xorwf	(_timer^(0+128)+10),w
  2524  0586                     u1765:	
  2525  0586  1903               	skipnz
  2526  0587  2D94               	goto	l7889
  2527                           
  2528                           ;function.c: 188: if (timer.ledStopTime > timer.ledStopCnt){
  2529  0588  082B               	movf	((_timer+1)^(0+128)+10),w
  2530  0589  022D               	subwf	((_timer+1)^(0+128)+12),w
  2531  058A  1D03               	skipz
  2532  058B  2D8E               	goto	u1775
  2533  058C  082A               	movf	(_timer^(0+128)+10),w
  2534  058D  022C               	subwf	(_timer^(0+128)+12),w
  2535  058E                     u1775:	
  2536  058E  1803               	skipnc
  2537  058F  2D9D               	goto	l7895
  2538                           
  2539                           ;function.c: 189: timer.ledStopCnt++;
  2540  0590  0AAC               	incf	(_timer^(0+128)+12),f
  2541  0591  1903               	skipnz
  2542  0592  0AAD               	incf	((_timer+1)^(0+128)+12),f
  2543  0593  2D9D               	goto	l7895
  2544  0594                     l7889:	
  2545                           
  2546                           ;function.c: 192: if (timer.ledStopTime!=0 && timer.ledStopCnt!=0){
  2547  0594  082A               	movf	(_timer^(0+128)+10),w
  2548  0595  042B               	iorwf	((_timer+1)^(0+128)+10),w
  2549  0596  1903               	btfsc	3,2
  2550  0597  2D9D               	goto	l7895
  2551  0598  082C               	movf	(_timer^(0+128)+12),w
  2552  0599  042D               	iorwf	((_timer+1)^(0+128)+12),w
  2553                           
  2554                           ;function.c: 195: ledMode = LM_Off;
  2555  059A  1283               	bcf	3,5	;RP0=0, select bank0
  2556  059B  1D03               	btfss	3,2
  2557  059C  01CE               	clrf	_ledMode
  2558  059D                     l7895:	
  2559                           
  2560                           ;function.c: 196: }
  2561                           ;function.c: 198: }
  2562                           ;function.c: 201: if (++led.flicker1hzCnt > 50){
  2563  059D  3033               	movlw	51
  2564  059E  1683               	bsf	3,5	;RP0=1, select bank1
  2565  059F  0AB4               	incf	_led^(0+128),f
  2566  05A0  0234               	subwf	_led^(0+128),w
  2567  05A1  1C03               	skipc
  2568  05A2  2DA6               	goto	l7901
  2569  05A3  3010               	movlw	(0+1) shl (_gbLed1hz& (0+7))
  2570                           
  2571                           ;function.c: 202: led.flicker1hzCnt = 0;
  2572  05A4  01B4               	clrf	_led^(0+128)
  2573                           
  2574                           ;function.c: 203: gbLed1hz =~ gbLed1hz;
  2575  05A5  06F0               	xorwf	_gbLed1hz/(0+8),f
  2576  05A6                     l7901:	
  2577                           
  2578                           ;function.c: 204: }
  2579                           ;function.c: 206: if (++led.flicker2hzCnt > 25){
  2580  05A6  301A               	movlw	26
  2581  05A7  0AB5               	incf	(_led^(0+128)+1),f
  2582  05A8  0235               	subwf	(_led^(0+128)+1),w
  2583  05A9  1C03               	skipc
  2584  05AA  2DD0               	goto	l7925
  2585  05AB  3008               	movlw	(0+1) shl (_gbLed2hz& (0+7))
  2586                           
  2587                           ;function.c: 207: led.flicker2hzCnt = 0;
  2588  05AC  01B5               	clrf	(_led^(0+128)+1)
  2589                           
  2590                           ;function.c: 208: gbLed2hz =~ gbLed2hz;
  2591  05AD  06F0               	xorwf	_gbLed2hz/(0+8),f
  2592  05AE  2DD0               	goto	l7925
  2593  05AF                     l806:	
  2594                           ;function.c: 213: case LM_Off:
  2595                           
  2596                           
  2597                           ;function.c: 215: RB4=1;
  2598  05AF  1606               	bsf	6,4	;volatile
  2599                           
  2600                           ;function.c: 216: RA1=1;
  2601  05B0  1485               	bsf	5,1	;volatile
  2602                           
  2603                           ;function.c: 217: break;
  2604  05B1  0008               	return
  2605  05B2                     l808:	
  2606                           ;function.c: 218: case LM_Red_On:
  2607                           
  2608                           
  2609                           ;function.c: 219: RB4=0;
  2610  05B2  1206               	bcf	6,4	;volatile
  2611                           
  2612                           ;function.c: 220: RA1=1;
  2613  05B3  1485               	bsf	5,1	;volatile
  2614                           
  2615                           ;function.c: 221: break;
  2616  05B4  0008               	return
  2617  05B5                     l809:	
  2618                           ;function.c: 222: case LM_white_On:
  2619                           
  2620                           
  2621                           ;function.c: 223: RB4=1;
  2622  05B5  1606               	bsf	6,4	;volatile
  2623                           
  2624                           ;function.c: 224: RA1=0;
  2625  05B6  1085               	bcf	5,1	;volatile
  2626                           
  2627                           ;function.c: 225: break;
  2628  05B7  0008               	return
  2629  05B8                     l810:	
  2630                           ;function.c: 226: case LM_white_1Hz:
  2631                           
  2632                           
  2633                           ;function.c: 227: RB4=1;
  2634  05B8  1606               	bsf	6,4	;volatile
  2635                           
  2636                           ;function.c: 228: if (gbLed1hz) {
  2637  05B9  1E70               	btfss	_gbLed1hz/(0+8),_gbLed1hz& (0+7)
  2638  05BA  2DC3               	goto	l811
  2639  05BB                     l7907:	
  2640                           
  2641                           ;function.c: 229: RA1=0;
  2642  05BB  1085               	bcf	5,1	;volatile
  2643                           
  2644                           ;function.c: 230: } else {
  2645  05BC  0008               	return
  2646  05BD                     l816:	
  2647                           ;function.c: 242: case LM_white_1Hz_3T:
  2648                           
  2649                           ;function.c: 236: if (gbLed2hz) {
  2650                           
  2651                           ;function.c: 235: RB4=1;
  2652                           
  2653  05BD  2DB8               	goto	l810
  2654  05BE                     l819:	
  2655                           ;function.c: 250: case LM_Red_1HZ_3T:
  2656                           
  2657                           ;function.c: 244: if (gbLed1hz) {
  2658                           
  2659                           ;function.c: 243: RB4=1;
  2660                           
  2661                           
  2662                           ;function.c: 251: if (gbLed1hz){
  2663  05BE  1E70               	btfss	_gbLed1hz/(0+8),_gbLed1hz& (0+7)
  2664  05BF  2DC2               	goto	l820
  2665  05C0                     l7913:	
  2666                           
  2667                           ;function.c: 252: RB4=0;
  2668  05C0  1206               	bcf	6,4	;volatile
  2669                           
  2670                           ;function.c: 253: } else {
  2671  05C1  2DC3               	goto	l811
  2672  05C2                     l820:	
  2673                           
  2674                           ;function.c: 254: RB4=1;
  2675  05C2  1606               	bsf	6,4	;volatile
  2676  05C3                     l811:	
  2677                           
  2678                           ;function.c: 231: RA1=1;
  2679  05C3  1485               	bsf	5,1	;volatile
  2680  05C4  0008               	return
  2681  05C5                     l813:	
  2682                           ;function.c: 234: case LM_white_2Hz:
  2683                           
  2684  05C5                     l822:	
  2685                           ;function.c: 258: case LM_white_1HZ_5T:
  2686                           
  2687                           
  2688                           ;function.c: 259: RB4=1;
  2689  05C5  1606               	bsf	6,4	;volatile
  2690                           
  2691                           ;function.c: 260: if (gbLed2hz){
  2692  05C6  19F0               	btfsc	_gbLed2hz/(0+8),_gbLed2hz& (0+7)
  2693  05C7  2DBB               	goto	l7907
  2694  05C8  2DC3               	goto	l811
  2695  05C9                     l825:	
  2696                           ;function.c: 266: case LM_Red_1HZ_10T:
  2697                           
  2698  05C9  2DBE               	goto	l819
  2699  05CA                     l828:	
  2700                           ;function.c: 274: case LM_Red_2HZ_10T:
  2701                           
  2702                           ;function.c: 267: if (gbLed1hz){
  2703                           
  2704                           
  2705                           ;function.c: 275: if (gbLed2hz){
  2706  05CA  19F0               	btfsc	_gbLed2hz/(0+8),_gbLed2hz& (0+7)
  2707  05CB  2DC0               	goto	l7913
  2708  05CC  2DC2               	goto	l820
  2709  05CD                     l831:	
  2710                           ;function.c: 283: case LM_Redwhite_1HZ_1T:
  2711                           
  2712                           
  2713                           ;function.c: 284: if (gbLed1hz){
  2714  05CD  1A70               	btfsc	_gbLed1hz/(0+8),_gbLed1hz& (0+7)
  2715  05CE  2DB2               	goto	l808
  2716  05CF  2DB5               	goto	l809
  2717  05D0                     l7925:	
  2718  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  2719  05D1  084E               	movf	_ledMode,w
  2720                           
  2721                           ; Switch size 1, requested type "speed"
  2722                           ; Number of cases is 11, Range of values is 0 to 10
  2723                           ; switch strategies available:
  2724                           ; Name         Instructions Cycles
  2725                           ; direct_byte           29     7 (fixed)
  2726                           ; simple_byte           34    18 (average)
  2727                           ; jumptable            260     6 (fixed)
  2728                           ;	Chosen strategy is direct_byte
  2729  05D2  0084               	movwf	4
  2730  05D3  300B               	movlw	11
  2731  05D4  0204               	subwf	4,w
  2732  05D5  1803               	skipnc
  2733  05D6  0008               	return
  2734  05D7  3006               	movlw	high S8227
  2735  05D8  008A               	movwf	10
  2736  05D9  1003               	clrc
  2737  05DA  0D04               	rlf	4,w
  2738  05DB  3EA0               	addlw	low S8227
  2739  05DC  0082               	movwf	2
  2740  05DD  0008               	return
  2741  05DE                     __end_of_LED_Display:	
  2742                           
  2743                           	psect	swtext3
  2744  06A0                     __pswtext3:	
  2745  06A0                     S8227:	
  2746  06A0  118A  2DAF         	ljmp	l806
  2747  06A2  118A  2DB2         	ljmp	l808
  2748  06A4  118A  2DB5         	ljmp	l809
  2749  06A6  118A  2DB8         	ljmp	l810
  2750  06A8  118A  2DC5         	ljmp	l813
  2751  06AA  118A  2DBD         	ljmp	l816
  2752  06AC  118A  2DBE         	ljmp	l819
  2753  06AE  118A  2DC5         	ljmp	l822
  2754  06B0  118A  2DC9         	ljmp	l825
  2755  06B2  118A  2DCA         	ljmp	l828
  2756  06B4  118A  2DCD         	ljmp	l831
  2757                           
  2758                           	psect	text21
  2759  0666                     __ptext21:	
  2760 ;; *************** function _KEY_WorkDriver *****************
  2761 ;; Defined at:
  2762 ;;		line 107 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 300/0
  2773 ;;		On exit  : 200/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0
  2779 ;;      Totals:         0       0       0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _KEY_WorkDriver
  2792  0666                     _KEY_WorkDriver:	
  2793                           
  2794                           ;function.c: 109: if (key.sw1Index == 1){
  2795                           
  2796                           ;incstack = 0
  2797                           ; Regs used in _KEY_WorkDriver: [wreg+status,2+status,0]
  2798  0666  0B3C               	decfsz	_key+1,w
  2799  0667  2E6D               	goto	l7819
  2800                           
  2801                           ;function.c: 110: timer.sw1Cnt++;
  2802  0668  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0669  0AA0               	incf	_timer^(0+128),f
  2804  066A  1903               	skipnz
  2805  066B  0AA1               	incf	(_timer+1)^(0+128),f
  2806                           
  2807                           ;function.c: 112: }else{
  2808  066C  2E70               	goto	l7821
  2809  066D                     l7819:	
  2810                           
  2811                           ;function.c: 113: timer.sw1Cnt = 0;
  2812  066D  1683               	bsf	3,5	;RP0=1, select bank1
  2813  066E  01A0               	clrf	_timer^(0+128)
  2814  066F  01A1               	clrf	(_timer+1)^(0+128)
  2815  0670                     l7821:	
  2816                           
  2817                           ;function.c: 115: }
  2818                           ;function.c: 116: if (timer.sw1Cnt>300 && workMode==WM_Poweroff){
  2819  0670  3001               	movlw	1
  2820  0671  0221               	subwf	(_timer+1)^(0+128),w
  2821  0672  302D               	movlw	45
  2822  0673  1903               	skipnz
  2823  0674  0220               	subwf	_timer^(0+128),w
  2824  0675  1C03               	skipc
  2825  0676  0008               	return
  2826  0677  1283               	bcf	3,5	;RP0=0, select bank0
  2827  0678  084F               	movf	_workMode,w
  2828  0679  1D03               	btfss	3,2
  2829  067A  0008               	return
  2830                           
  2831                           ;function.c: 117: timer.stanbyCnt = 0;
  2832  067B  1683               	bsf	3,5	;RP0=1, select bank1
  2833  067C  01A4               	clrf	(_timer^(0+128)+4)
  2834  067D  01A5               	clrf	((_timer+1)^(0+128)+4)
  2835                           
  2836                           ;function.c: 118: work.inWorkIndex = 1;
  2837  067E  1283               	bcf	3,5	;RP0=0, select bank0
  2838  067F  3002               	movlw	2
  2839  0680  01C6               	clrf	_work
  2840  0681  0AC6               	incf	_work,f
  2841                           
  2842                           ;function.c: 119: ledMode = LM_white_On;
  2843  0682  00CE               	movwf	_ledMode
  2844                           
  2845                           ;function.c: 120: workMode = WM_Standby;
  2846  0683  01CF               	clrf	_workMode
  2847  0684  0ACF               	incf	_workMode,f
  2848  0685  0008               	return
  2849  0686                     __end_of_KEY_WorkDriver:	
  2850                           
  2851                           	psect	text22
  2852  05DE                     __ptext22:	
  2853 ;; *************** function _KEY_Driver *****************
  2854 ;; Defined at:
  2855 ;;		line 61 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0
  2864 ;; Tracked objects:
  2865 ;;		On entry : 300/0
  2866 ;;		On exit  : 300/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    1
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _KEY_Driver
  2885  05DE                     _KEY_Driver:	
  2886                           
  2887                           ;function.c: 64: if (key.sw1Temp > 250){
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in _KEY_Driver: [wreg+status,2+status,0]
  2891  05DE  30FB               	movlw	251
  2892  05DF  023B               	subwf	_key,w
  2893  05E0  1C03               	skipc
  2894  05E1  2DE4               	goto	l7771
  2895                           
  2896                           ;function.c: 65: key.sw1Temp = 250;
  2897  05E2  30FA               	movlw	250
  2898  05E3  00BB               	movwf	_key
  2899  05E4                     l7771:	
  2900                           
  2901                           ;function.c: 66: }
  2902                           ;function.c: 69: if ((RA3==0) && (RB5==1) && timer.ledStopCnt==0){
  2903  05E4  1D85               	btfss	5,3	;volatile
  2904  05E5  1E86               	btfss	6,5	;volatile
  2905  05E6  2DF7               	goto	l7785
  2906  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  2907  05E8  082C               	movf	(_timer^(0+128)+12),w
  2908  05E9  042D               	iorwf	((_timer+1)^(0+128)+12),w
  2909  05EA  1D03               	btfss	3,2
  2910  05EB  2DF7               	goto	l7785
  2911                           
  2912                           ;function.c: 70: key.sw1Temp++;
  2913  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  2914  05ED  3002               	movlw	2
  2915  05EE  0ABB               	incf	_key,f
  2916                           
  2917                           ;function.c: 71: if (key.sw1Temp == 2){
  2918  05EF  063B               	xorwf	_key,w
  2919  05F0  1D03               	btfss	3,2
  2920  05F1  2DFA               	goto	l7787
  2921                           
  2922                           ;function.c: 72: key.sw1Index = 1;
  2923  05F2  01BC               	clrf	_key+1
  2924  05F3  0ABC               	incf	_key+1,f
  2925                           
  2926                           ;function.c: 73: sleep10sTimeCnt = 0;
  2927  05F4  01C8               	clrf	_sleep10sTimeCnt
  2928  05F5  01C9               	clrf	_sleep10sTimeCnt+1
  2929  05F6  2DFA               	goto	l7787
  2930  05F7                     l7785:	
  2931                           
  2932                           ;function.c: 76: key.sw1Temp = 0;
  2933  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  2934  05F8  01BB               	clrf	_key
  2935                           
  2936                           ;function.c: 77: key.sw1Index = 0;
  2937  05F9  01BC               	clrf	_key+1
  2938  05FA                     l7787:	
  2939                           
  2940                           ;function.c: 78: }
  2941                           ;function.c: 82: if (key.sw2Temp > 250){
  2942  05FA  30FB               	movlw	251
  2943  05FB  023D               	subwf	_key+2,w
  2944  05FC  1C03               	skipc
  2945  05FD  2E00               	goto	l7791
  2946                           
  2947                           ;function.c: 83: key.sw2Temp = 250;
  2948  05FE  30FA               	movlw	250
  2949  05FF  00BD               	movwf	_key+2
  2950  0600                     l7791:	
  2951                           
  2952                           ;function.c: 84: }
  2953                           ;function.c: 85: if ((RB5==0) && (RA3==1) && timer.ledStopCnt==0){
  2954  0600  1E86               	btfss	6,5	;volatile
  2955  0601  1D85               	btfss	5,3	;volatile
  2956  0602  2E18               	goto	l7809
  2957  0603  1683               	bsf	3,5	;RP0=1, select bank1
  2958  0604  082C               	movf	(_timer^(0+128)+12),w
  2959  0605  042D               	iorwf	((_timer+1)^(0+128)+12),w
  2960  0606  1D03               	btfss	3,2
  2961  0607  2E18               	goto	l7809
  2962                           
  2963                           ;function.c: 86: key.sw2Temp++;
  2964  0608  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0609  3002               	movlw	2
  2966  060A  0ABD               	incf	_key+2,f
  2967                           
  2968                           ;function.c: 87: sleep10sTimeCnt = 0;
  2969  060B  01C8               	clrf	_sleep10sTimeCnt
  2970  060C  01C9               	clrf	_sleep10sTimeCnt+1
  2971                           
  2972                           ;function.c: 88: if (key.sw2Temp == 2){
  2973  060D  063D               	xorwf	_key+2,w
  2974  060E  1D03               	btfss	3,2
  2975  060F  2E1A               	goto	l7811
  2976                           
  2977                           ;function.c: 89: key.sw2Index = 1;
  2978  0610  01BE               	clrf	_key+3
  2979  0611  0ABE               	incf	_key+3,f
  2980                           
  2981                           ;function.c: 90: if (workMode != WM_Standby){
  2982  0612  034F               	decf	_workMode,w
  2983  0613  1903               	btfsc	3,2
  2984  0614  2E1A               	goto	l7811
  2985                           
  2986                           ;function.c: 91: ledMode = LM_Red_1HZ_3T;
  2987  0615  3006               	movlw	6
  2988  0616  00CE               	movwf	_ledMode
  2989  0617  2E1A               	goto	l7811
  2990  0618                     l7809:	
  2991                           
  2992                           ;function.c: 95: key.sw2Index = 0;
  2993  0618  1283               	bcf	3,5	;RP0=0, select bank0
  2994  0619  01BE               	clrf	_key+3
  2995  061A                     l7811:	
  2996                           
  2997                           ;function.c: 96: }
  2998                           ;function.c: 97: if ((RB5==1)){
  2999  061A  1A86               	btfsc	6,5	;volatile
  3000                           
  3001                           ;function.c: 98: key.sw2Temp = 0;
  3002  061B  01BD               	clrf	_key+2
  3003  061C  0008               	return
  3004  061D                     __end_of_KEY_Driver:	
  3005                           
  3006                           	psect	text23
  3007  0686                     __ptext23:	
  3008 ;; *************** function _CUP_USB_Driver *****************
  3009 ;; Defined at:
  3010 ;;		line 131 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\function.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2
  3019 ;; Tracked objects:
  3020 ;;		On entry : 300/300
  3021 ;;		On exit  : 300/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3024 ;;      Params:         0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0
  3027 ;;      Totals:         0       0       0       0       0
  3028 ;;Total ram usage:        0 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    1
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _CUP_USB_Driver
  3040  0686                     _CUP_USB_Driver:	
  3041                           
  3042                           ;function.c: 134: if ((RB0==0) && 1==usbIndex){
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _CUP_USB_Driver: [wreg+status,2]
  3046  0686  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0687  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0688  1C06               	btfss	6,0	;volatile
  3049  0689  1EF0               	btfss	_usbIndex/(0+8),_usbIndex& (0+7)
  3050  068A  2E99               	goto	l772
  3051                           
  3052                           ;function.c: 135: charDisplayCnt = 100;
  3053  068B  3064               	movlw	100
  3054  068C  00C4               	movwf	_charDisplayCnt
  3055  068D  3004               	movlw	4
  3056  068E  01C5               	clrf	_charDisplayCnt+1
  3057  068F  12F0               	bcf	_usbIndex/(0+8),_usbIndex& (0+7)
  3058                           
  3059                           ;function.c: 137: workMode = WM_Charge;
  3060  0690  00CF               	movwf	_workMode
  3061                           
  3062                           ;function.c: 138: timer.ledStopTime = 0;
  3063  0691  1683               	bsf	3,5	;RP0=1, select bank1
  3064  0692  01AA               	clrf	(_timer^(0+128)+10)
  3065  0693  01AB               	clrf	((_timer+1)^(0+128)+10)
  3066                           
  3067                           ;function.c: 139: ledMode = LM_Red_On;
  3068  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0695  01CE               	clrf	_ledMode
  3070  0696  0ACE               	incf	_ledMode,f
  3071                           
  3072                           ;function.c: 140: charPeriod = 0;
  3073  0697  01CD               	clrf	_charPeriod
  3074                           
  3075                           ;function.c: 141: }else if ((RB0==1) && 0==usbIndex){
  3076  0698  0008               	return
  3077  0699                     l772:	
  3078  0699  1806               	btfsc	6,0	;volatile
  3079  069A  1AF0               	btfsc	_usbIndex/(0+8),_usbIndex& (0+7)
  3080  069B  0008               	return
  3081                           
  3082                           ;function.c: 142: usbIndex = 1;
  3083  069C  16F0               	bsf	_usbIndex/(0+8),_usbIndex& (0+7)
  3084                           
  3085                           ;function.c: 143: workMode = WM_Standby;
  3086  069D  01CF               	clrf	_workMode
  3087  069E  0ACF               	incf	_workMode,f
  3088                           
  3089                           ;function.c: 144: }else{
  3090  069F  0008               	return
  3091  06A0                     __end_of_CUP_USB_Driver:	
  3092                           
  3093                           	psect	text24
  3094  001E                     __ptext24:	
  3095 ;; *************** function _ADC_Driver *****************
  3096 ;; Defined at:
  3097 ;;		line 154 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_adc.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  i               1   19[BANK0 ] unsigned char 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 200/0
  3108 ;;		On exit  : 300/300
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3111 ;;      Params:         0       0       0       0       0
  3112 ;;      Locals:         0       1       0       0       0
  3113 ;;      Temps:          0       2       0       0       0
  3114 ;;      Totals:         0       3       0       0       0
  3115 ;;Total ram usage:        3 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    2
  3118 ;; This function calls:
  3119 ;;		_ADC_Sample
  3120 ;;		___lldiv
  3121 ;;		___lmul
  3122 ;;		___lwdiv
  3123 ;;		___wmul
  3124 ;; This function is called by:
  3125 ;;		_main
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _ADC_Driver
  3131  001E                     _ADC_Driver:	
  3132                           
  3133                           ;mcu_adc.c: 156: u8 i;
  3134                           ;mcu_adc.c: 157: if (adc.chIndex > 3){
  3135                           
  3136                           ;incstack = 0
  3137                           ; Regs used in _ADC_Driver: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3138  001E  3004               	movlw	4
  3139  001F  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0020  0222               	subwf	_adc+2,w
  3141  0021  1C03               	skipc
  3142  0022  2841               	goto	l7981
  3143                           
  3144                           ;mcu_adc.c: 158: adc.chIndex = 0;
  3145  0023  01A2               	clrf	_adc+2
  3146  0024  2841               	goto	l7981
  3147  0025                     l7967:	
  3148                           
  3149                           ;mcu_adc.c: 164: adc.chAisle = 2;
  3150  0025  3002               	movlw	2
  3151  0026  00A1               	movwf	_adc+1
  3152                           
  3153                           ;mcu_adc.c: 165: TRISA2 = 1;
  3154  0027  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0028  1505               	bsf	5,2	;volatile
  3156                           
  3157                           ;mcu_adc.c: 166: ANSEL |=0X04;
  3158  0029  1703               	bsf	3,6	;RP1=1, select bank3
  3159  002A  1508               	bsf	8,2	;volatile
  3160                           
  3161                           ;mcu_adc.c: 167: break;
  3162  002B  284F               	goto	l7983
  3163  002C                     l3156:	
  3164                           ;mcu_adc.c: 168: case 1:
  3165                           
  3166                           
  3167                           ;mcu_adc.c: 169: TRISA4 = 1;
  3168  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3169  002D  1605               	bsf	5,4	;volatile
  3170                           
  3171                           ;mcu_adc.c: 170: ANSEL |=0X08;
  3172  002E  1703               	bsf	3,6	;RP1=1, select bank3
  3173  002F  1588               	bsf	8,3	;volatile
  3174                           
  3175                           ;mcu_adc.c: 171: adc.chAisle = 4;
  3176  0030  3004               	movlw	4
  3177  0031  283D               	goto	L7
  3178  0032                     l3157:	
  3179                           ;mcu_adc.c: 173: case 2:
  3180                           
  3181                           ;mcu_adc.c: 172: break;
  3182                           
  3183                           
  3184                           ;mcu_adc.c: 174: TRISA5 = 1;
  3185  0032  1683               	bsf	3,5	;RP0=1, select bank1
  3186  0033  1685               	bsf	5,5	;volatile
  3187                           
  3188                           ;mcu_adc.c: 175: ANSEL |=0X20;
  3189  0034  1703               	bsf	3,6	;RP1=1, select bank3
  3190  0035  1688               	bsf	8,5	;volatile
  3191                           
  3192                           ;mcu_adc.c: 176: adc.chAisle = 5;
  3193  0036  3005               	movlw	5
  3194  0037  283D               	goto	L7
  3195  0038                     l3158:	
  3196                           ;mcu_adc.c: 178: case 3:
  3197                           
  3198                           ;mcu_adc.c: 177: break;
  3199                           
  3200                           
  3201                           ;mcu_adc.c: 179: TRISB1 = 1;
  3202  0038  1683               	bsf	3,5	;RP0=1, select bank1
  3203  0039  1486               	bsf	6,1	;volatile
  3204                           
  3205                           ;mcu_adc.c: 180: ANSELH |=0X01;
  3206  003A  1703               	bsf	3,6	;RP1=1, select bank3
  3207  003B  1409               	bsf	9,0	;volatile
  3208                           
  3209                           ;mcu_adc.c: 181: adc.chAisle = 12;
  3210  003C  300C               	movlw	12
  3211  003D                     L7:	
  3212  003D  1283               	bcf	3,5	;RP0=0, select bank0
  3213  003E  1303               	bcf	3,6	;RP1=0, select bank0
  3214  003F  00A1               	movwf	_adc+1
  3215                           
  3216                           ;mcu_adc.c: 182: break;
  3217  0040  284F               	goto	l7983
  3218  0041                     l7981:	
  3219  0041  0822               	movf	_adc+2,w
  3220                           
  3221                           ; Switch size 1, requested type "speed"
  3222                           ; Number of cases is 4, Range of values is 0 to 3
  3223                           ; switch strategies available:
  3224                           ; Name         Instructions Cycles
  3225                           ; simple_byte           13     7 (average)
  3226                           ; direct_byte           15     7 (fixed)
  3227                           ; jumptable            260     6 (fixed)
  3228                           ;	Chosen strategy is simple_byte
  3229  0042  3A00               	xorlw	0	; case 0
  3230  0043  1903               	skipnz
  3231  0044  2825               	goto	l7967
  3232  0045  3A01               	xorlw	1	; case 1
  3233  0046  1903               	skipnz
  3234  0047  282C               	goto	l3156
  3235  0048  3A03               	xorlw	3	; case 2
  3236  0049  1903               	skipnz
  3237  004A  2832               	goto	l3157
  3238  004B  3A01               	xorlw	1	; case 3
  3239  004C  1903               	skipnz
  3240  004D  2838               	goto	l3158
  3241  004E  284F               	goto	l7983
  3242  004F                     l7983:	
  3243                           
  3244                           ;mcu_adc.c: 186: for (i = 0; i < 10; i++){
  3245  004F  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0050  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0051  01E3               	clrf	ADC_Driver@i
  3248  0052                     l7989:	
  3249                           
  3250                           ;mcu_adc.c: 187: if (i < 2){
  3251  0052  3002               	movlw	2
  3252  0053  0263               	subwf	ADC_Driver@i,w
  3253  0054  1803               	skipnc
  3254  0055  2858               	goto	l7995
  3255                           
  3256                           ;mcu_adc.c: 188: adc.adcBufferTemp = 0;
  3257  0056  01A5               	clrf	_adc+5
  3258  0057  01A6               	clrf	_adc+6
  3259  0058                     l7995:	
  3260                           ;mcu_adc.c: 190: }else{
  3261                           
  3262                           ;mcu_adc.c: 189: ADC_Sample(adc.chAisle);
  3263                           
  3264                           
  3265                           ;mcu_adc.c: 191: ADC_Sample(adc.chAisle);
  3266  0058  0821               	movf	_adc+1,w
  3267  0059  21CA  118A         	fcall	_ADC_Sample
  3268  005B  300A               	movlw	10
  3269  005C  0AE3               	incf	ADC_Driver@i,f
  3270  005D  0263               	subwf	ADC_Driver@i,w
  3271  005E  1C03               	skipc
  3272  005F  2852               	goto	l7989
  3273                           
  3274                           ;mcu_adc.c: 192: }
  3275                           ;mcu_adc.c: 193: }
  3276                           ;mcu_adc.c: 194: if (++adc.index >= 16){
  3277  0060  3010               	movlw	16
  3278  0061  0AA0               	incf	_adc,f
  3279  0062  0220               	subwf	_adc,w
  3280  0063  1C03               	skipc
  3281  0064  2942               	goto	l8035
  3282                           
  3283                           ;mcu_adc.c: 195: adc.index = 0;
  3284  0065  01A0               	clrf	_adc
  3285                           
  3286                           ;mcu_adc.c: 196: switch (adc.chIndex)
  3287  0066  2933               	goto	l8031
  3288  0067                     l8005:	
  3289                           
  3290                           ;mcu_adc.c: 199: adc.aVolTemp = ((u32)adc.adcBufferTemp*3532)/10000-3;
  3291  0067  3027               	movlw	39
  3292  0068  01D7               	clrf	___lldiv@divisor+3
  3293  0069  01D6               	clrf	___lldiv@divisor+2
  3294  006A  00D5               	movwf	___lldiv@divisor+1
  3295  006B  3010               	movlw	16
  3296  006C  00D4               	movwf	___lldiv@divisor
  3297  006D  0825               	movf	_adc+5,w
  3298  006E  00F4               	movwf	___lmul@multiplier
  3299  006F  0826               	movf	_adc+6,w
  3300  0070  00F5               	movwf	___lmul@multiplier+1
  3301  0071  300D               	movlw	13
  3302  0072  01F6               	clrf	___lmul@multiplier+2
  3303  0073  01F7               	clrf	___lmul@multiplier+3
  3304  0074  01FB               	clrf	___lmul@multiplicand+3
  3305  0075  01FA               	clrf	___lmul@multiplicand+2
  3306  0076  00F9               	movwf	___lmul@multiplicand+1
  3307  0077  30CC               	movlw	204
  3308  0078  00F8               	movwf	___lmul@multiplicand
  3309  0079  2197  118A         	fcall	___lmul
  3310  007B  0877               	movf	?___lmul+3,w
  3311  007C  00DB               	movwf	___lldiv@dividend+3
  3312  007D  0876               	movf	?___lmul+2,w
  3313  007E  00DA               	movwf	___lldiv@dividend+2
  3314  007F  0875               	movf	?___lmul+1,w
  3315  0080  00D9               	movwf	___lldiv@dividend+1
  3316  0081  0874               	movf	?___lmul,w
  3317  0082  00D8               	movwf	___lldiv@dividend
  3318  0083  214F  118A         	fcall	___lldiv
  3319  0085  0854               	movf	?___lldiv,w
  3320  0086  3EFD               	addlw	253
  3321  0087  00B6               	movwf	_adc+22
  3322  0088  0855               	movf	?___lldiv+1,w
  3323  0089  1803               	skipnc
  3324  008A  3E01               	addlw	1
  3325  008B  3EFF               	addlw	255
  3326  008C  00B7               	movwf	_adc+23
  3327                           
  3328                           ;mcu_adc.c: 200: adc.batTotal = ((u32)adc.adcBufferTemp*3532)/10000-3;
  3329  008D  3027               	movlw	39
  3330  008E  01D7               	clrf	___lldiv@divisor+3
  3331  008F  01D6               	clrf	___lldiv@divisor+2
  3332  0090  00D5               	movwf	___lldiv@divisor+1
  3333  0091  3010               	movlw	16
  3334  0092  00D4               	movwf	___lldiv@divisor
  3335  0093  0825               	movf	_adc+5,w
  3336  0094  00F4               	movwf	___lmul@multiplier
  3337  0095  0826               	movf	_adc+6,w
  3338  0096  00F5               	movwf	___lmul@multiplier+1
  3339  0097  300D               	movlw	13
  3340  0098  01F6               	clrf	___lmul@multiplier+2
  3341  0099  01F7               	clrf	___lmul@multiplier+3
  3342  009A  01FB               	clrf	___lmul@multiplicand+3
  3343  009B  01FA               	clrf	___lmul@multiplicand+2
  3344  009C  00F9               	movwf	___lmul@multiplicand+1
  3345  009D  30CC               	movlw	204
  3346  009E  00F8               	movwf	___lmul@multiplicand
  3347  009F  2197  118A         	fcall	___lmul
  3348  00A1  0877               	movf	?___lmul+3,w
  3349  00A2  00DB               	movwf	___lldiv@dividend+3
  3350  00A3  0876               	movf	?___lmul+2,w
  3351  00A4  00DA               	movwf	___lldiv@dividend+2
  3352  00A5  0875               	movf	?___lmul+1,w
  3353  00A6  00D9               	movwf	___lldiv@dividend+1
  3354  00A7  0874               	movf	?___lmul,w
  3355  00A8  00D8               	movwf	___lldiv@dividend
  3356  00A9  214F  118A         	fcall	___lldiv
  3357  00AB  0854               	movf	?___lldiv,w
  3358  00AC  3EFD               	addlw	253
  3359  00AD  00A8               	movwf	_adc+8
  3360  00AE  0855               	movf	?___lldiv+1,w
  3361  00AF  1803               	skipnc
  3362  00B0  3E01               	addlw	1
  3363  00B1  3EFF               	addlw	255
  3364  00B2  00A9               	movwf	_adc+9
  3365                           
  3366                           ;mcu_adc.c: 201: adc.aVolBank = adc.aVolTemp;
  3367  00B3  0837               	movf	_adc+23,w
  3368  00B4  00BA               	movwf	_adc+26
  3369  00B5  0836               	movf	_adc+22,w
  3370  00B6  00B9               	movwf	_adc+25
  3371                           
  3372                           ;mcu_adc.c: 204: if (adc.volCnt>10 || adc.volCnt<1){
  3373  00B7  300B               	movlw	11
  3374  00B8  0238               	subwf	_adc+24,w
  3375  00B9  1803               	skipnc
  3376  00BA  28BE               	goto	l8013
  3377  00BB  0838               	movf	_adc+24,w
  3378  00BC  1D03               	btfss	3,2
  3379  00BD  28C0               	goto	l3167
  3380  00BE                     l8013:	
  3381                           
  3382                           ;mcu_adc.c: 205: adc.volCnt = 5;
  3383  00BE  3005               	movlw	5
  3384  00BF  00B8               	movwf	_adc+24
  3385  00C0                     l3167:	
  3386                           
  3387                           ;mcu_adc.c: 206: }
  3388                           ;mcu_adc.c: 207: if (adc.aVolTemp > adc.aVolBank){
  3389  00C0  0837               	movf	_adc+23,w
  3390  00C1  023A               	subwf	_adc+26,w
  3391  00C2  1D03               	skipz
  3392  00C3  28C6               	goto	u1995
  3393  00C4  0836               	movf	_adc+22,w
  3394  00C5  0239               	subwf	_adc+25,w
  3395  00C6                     u1995:	
  3396  00C6  1803               	skipnc
  3397  00C7  28CA               	goto	l8017
  3398                           
  3399                           ;mcu_adc.c: 208: adc.volCnt++;
  3400  00C8  0AB8               	incf	_adc+24,f
  3401                           
  3402                           ;mcu_adc.c: 209: }else if(adc.aVolTemp < adc.aVolBank){
  3403  00C9  2941               	goto	l8033
  3404  00CA                     l8017:	
  3405  00CA  083A               	movf	_adc+26,w
  3406  00CB  0237               	subwf	_adc+23,w
  3407  00CC  1D03               	skipz
  3408  00CD  28D0               	goto	u2005
  3409  00CE  0839               	movf	_adc+25,w
  3410  00CF  0236               	subwf	_adc+22,w
  3411  00D0                     u2005:	
  3412  00D0  1803               	skipnc
  3413  00D1  2941               	goto	l8033
  3414                           
  3415                           ;mcu_adc.c: 210: adc.volCnt--;
  3416  00D2  03B8               	decf	_adc+24,f
  3417  00D3  2941               	goto	l8033
  3418  00D4                     l8021:	
  3419                           
  3420                           ;mcu_adc.c: 215: adc.batV2 = ((u32)adc.adcBufferTemp*3532)/10000-3;
  3421  00D4  3027               	movlw	39
  3422  00D5  01D7               	clrf	___lldiv@divisor+3
  3423  00D6  01D6               	clrf	___lldiv@divisor+2
  3424  00D7  00D5               	movwf	___lldiv@divisor+1
  3425  00D8  3010               	movlw	16
  3426  00D9  00D4               	movwf	___lldiv@divisor
  3427  00DA  0825               	movf	_adc+5,w
  3428  00DB  00F4               	movwf	___lmul@multiplier
  3429  00DC  0826               	movf	_adc+6,w
  3430  00DD  00F5               	movwf	___lmul@multiplier+1
  3431  00DE  300D               	movlw	13
  3432  00DF  01F6               	clrf	___lmul@multiplier+2
  3433  00E0  01F7               	clrf	___lmul@multiplier+3
  3434  00E1  01FB               	clrf	___lmul@multiplicand+3
  3435  00E2  01FA               	clrf	___lmul@multiplicand+2
  3436  00E3  00F9               	movwf	___lmul@multiplicand+1
  3437  00E4  30CC               	movlw	204
  3438  00E5  00F8               	movwf	___lmul@multiplicand
  3439  00E6  2197  118A         	fcall	___lmul
  3440  00E8  0877               	movf	?___lmul+3,w
  3441  00E9  00DB               	movwf	___lldiv@dividend+3
  3442  00EA  0876               	movf	?___lmul+2,w
  3443  00EB  00DA               	movwf	___lldiv@dividend+2
  3444  00EC  0875               	movf	?___lmul+1,w
  3445  00ED  00D9               	movwf	___lldiv@dividend+1
  3446  00EE  0874               	movf	?___lmul,w
  3447  00EF  00D8               	movwf	___lldiv@dividend
  3448  00F0  214F  118A         	fcall	___lldiv
  3449  00F2  0854               	movf	?___lldiv,w
  3450  00F3  3EFD               	addlw	253
  3451  00F4  00AC               	movwf	_adc+12
  3452  00F5  0855               	movf	?___lldiv+1,w
  3453  00F6  1803               	skipnc
  3454  00F7  3E01               	addlw	1
  3455  00F8  3EFF               	addlw	255
  3456  00F9  00AD               	movwf	_adc+13
  3457                           
  3458                           ;mcu_adc.c: 216: break;
  3459  00FA  2941               	goto	l8033
  3460  00FB                     l8023:	
  3461                           
  3462                           ;mcu_adc.c: 218: adc.batILoad= adc.adcBufferTemp;
  3463  00FB  0826               	movf	_adc+6,w
  3464  00FC  00AF               	movwf	_adc+15
  3465  00FD  0825               	movf	_adc+5,w
  3466  00FE  00AE               	movwf	_adc+14
  3467                           
  3468                           ;mcu_adc.c: 219: break;
  3469  00FF  2941               	goto	l8033
  3470  0100                     l8025:	
  3471                           
  3472                           ;mcu_adc.c: 223: adc.adcBuffer = (adc.adcBufferTemp*277)+1000;
  3473  0100  0826               	movf	_adc+6,w
  3474  0101  00F5               	movwf	___wmul@multiplier+1
  3475  0102  0825               	movf	_adc+5,w
  3476  0103  00F4               	movwf	___wmul@multiplier
  3477  0104  3015               	movlw	21
  3478  0105  00F6               	movwf	___wmul@multiplicand
  3479  0106  3001               	movlw	1
  3480  0107  00F7               	movwf	___wmul@multiplicand+1
  3481  0108  22D0  118A         	fcall	___wmul
  3482  010A  0874               	movf	?___wmul,w
  3483  010B  3EE8               	addlw	232
  3484  010C  00A3               	movwf	_adc+3
  3485  010D  0875               	movf	?___wmul+1,w
  3486  010E  1803               	skipnc
  3487  010F  3E01               	addlw	1
  3488  0110  3E03               	addlw	3
  3489  0111  00A4               	movwf	_adc+4
  3490                           
  3491                           ;mcu_adc.c: 224: adc.batCharBank = adc.adcBuffer/100-5;
  3492  0112  3064               	movlw	100
  3493  0113  00F4               	movwf	___lwdiv@divisor
  3494  0114  01F5               	clrf	___lwdiv@divisor+1
  3495  0115  0824               	movf	_adc+4,w
  3496  0116  00F7               	movwf	___lwdiv@dividend+1
  3497  0117  0823               	movf	_adc+3,w
  3498  0118  00F6               	movwf	___lwdiv@dividend
  3499  0119  22A6  118A         	fcall	___lwdiv
  3500  011B  0874               	movf	?___lwdiv,w
  3501  011C  3EFB               	addlw	251
  3502  011D  00B2               	movwf	_adc+18
  3503  011E  0875               	movf	?___lwdiv+1,w
  3504  011F  1803               	skipnc
  3505  0120  3E01               	addlw	1
  3506  0121  3EFF               	addlw	255
  3507  0122  00B3               	movwf	_adc+19
  3508                           
  3509                           ;mcu_adc.c: 225: adc.batChar = adc.batCharBank/2;
  3510  0123  3032               	movlw	((low (_adc| 0))& (0+255)+18)
  3511  0124  0084               	movwf	4
  3512  0125  1383               	bcf	3,7	;select IRP bank0
  3513  0126  0800               	movf	0,w
  3514  0127  00E1               	movwf	??_ADC_Driver
  3515  0128  0A84               	incf	4,f
  3516  0129  0800               	movf	0,w
  3517  012A  00E2               	movwf	??_ADC_Driver+1
  3518  012B  1003               	clrc
  3519  012C  0CE2               	rrf	??_ADC_Driver+1,f
  3520  012D  0CE1               	rrf	??_ADC_Driver,f
  3521  012E  0861               	movf	??_ADC_Driver,w
  3522  012F  00B0               	movwf	_adc+16
  3523  0130  0862               	movf	??_ADC_Driver+1,w
  3524  0131  00B1               	movwf	_adc+17
  3525                           
  3526                           ;mcu_adc.c: 227: break;
  3527  0132  2941               	goto	l8033
  3528  0133                     l8031:	
  3529  0133  0822               	movf	_adc+2,w
  3530                           
  3531                           ; Switch size 1, requested type "speed"
  3532                           ; Number of cases is 4, Range of values is 0 to 3
  3533                           ; switch strategies available:
  3534                           ; Name         Instructions Cycles
  3535                           ; simple_byte           13     7 (average)
  3536                           ; direct_byte           15     7 (fixed)
  3537                           ; jumptable            260     6 (fixed)
  3538                           ;	Chosen strategy is simple_byte
  3539  0134  3A00               	xorlw	0	; case 0
  3540  0135  1903               	skipnz
  3541  0136  2867               	goto	l8005
  3542  0137  3A01               	xorlw	1	; case 1
  3543  0138  1903               	skipnz
  3544  0139  28D4               	goto	l8021
  3545  013A  3A03               	xorlw	3	; case 2
  3546  013B  1903               	skipnz
  3547  013C  28FB               	goto	l8023
  3548  013D  3A01               	xorlw	1	; case 3
  3549  013E  1903               	skipnz
  3550  013F  2900               	goto	l8025
  3551  0140  2941               	goto	l8033
  3552  0141                     l8033:	
  3553                           
  3554                           ;mcu_adc.c: 230: adc.chIndex++;
  3555  0141  0AA2               	incf	_adc+2,f
  3556  0142                     l8035:	
  3557                           
  3558                           ;mcu_adc.c: 231: }
  3559                           ;mcu_adc.c: 232: adc.batV1 = adc.batTotal-adc.batV2;
  3560  0142  082C               	movf	_adc+12,w
  3561  0143  0228               	subwf	_adc+8,w
  3562  0144  00AA               	movwf	_adc+10
  3563  0145  082D               	movf	_adc+13,w
  3564  0146  1C03               	skipc
  3565  0147  0A2D               	incf	_adc+13,w
  3566  0148  0229               	subwf	_adc+9,w
  3567  0149  00AB               	movwf	_adc+11
  3568                           
  3569                           ;mcu_adc.c: 233: ANSEL = 0x00;
  3570  014A  1683               	bsf	3,5	;RP0=1, select bank3
  3571  014B  1703               	bsf	3,6	;RP1=1, select bank3
  3572  014C  0188               	clrf	8	;volatile
  3573                           
  3574                           ;mcu_adc.c: 234: ANSELH = 0x00;
  3575  014D  0189               	clrf	9	;volatile
  3576  014E  0008               	return
  3577  014F                     __end_of_ADC_Driver:	
  3578  014F                     __ptext28:	
  3579 ;; *************** function ___lldiv *****************
  3580 ;; Defined at:
  3581 ;;		line 6 in file "C:\Program Files (x86)\SCMCU_IDE_V2.00.07\data\sources\common\lldiv.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  divisor         4    4[BANK0 ] unsigned long 
  3584 ;;  dividend        4    8[BANK0 ] unsigned long 
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  quotient        4   12[BANK0 ] unsigned long 
  3587 ;;  counter         1   16[BANK0 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  4    4[BANK0 ] unsigned long 
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 300/0
  3594 ;;		On exit  : 300/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         0       8       0       0       0
  3598 ;;      Locals:         0       5       0       0       0
  3599 ;;      Temps:          0       0       0       0       0
  3600 ;;      Totals:         0      13       0       0       0
  3601 ;;Total ram usage:       13 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_ADC_Driver
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function ___lldiv
  3613  014F                     ___lldiv:	
  3614                           
  3615                           ;incstack = 0
  3616                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3617  014F  01DC               	clrf	___lldiv@quotient
  3618  0150  01DD               	clrf	___lldiv@quotient+1
  3619  0151  01DE               	clrf	___lldiv@quotient+2
  3620  0152  01DF               	clrf	___lldiv@quotient+3
  3621  0153  0857               	movf	___lldiv@divisor+3,w
  3622  0154  0456               	iorwf	___lldiv@divisor+2,w
  3623  0155  0455               	iorwf	___lldiv@divisor+1,w
  3624  0156  0454               	iorwf	___lldiv@divisor,w
  3625  0157  1903               	skipnz
  3626  0158  298E               	goto	l7737
  3627  0159  01E0               	clrf	___lldiv@counter
  3628  015A                     L10:	
  3629  015A  0AE0               	incf	___lldiv@counter,f
  3630  015B  1BD7               	btfsc	___lldiv@divisor+3,7
  3631  015C  2963               	goto	l7725
  3632  015D  1003               	clrc
  3633  015E  0DD4               	rlf	___lldiv@divisor,f
  3634  015F  0DD5               	rlf	___lldiv@divisor+1,f
  3635  0160  0DD6               	rlf	___lldiv@divisor+2,f
  3636  0161  0DD7               	rlf	___lldiv@divisor+3,f
  3637  0162  295A               	goto	L10
  3638  0163                     l7725:	
  3639  0163  1003               	clrc
  3640  0164  0DDC               	rlf	___lldiv@quotient,f
  3641  0165  0DDD               	rlf	___lldiv@quotient+1,f
  3642  0166  0DDE               	rlf	___lldiv@quotient+2,f
  3643  0167  0DDF               	rlf	___lldiv@quotient+3,f
  3644  0168  0857               	movf	___lldiv@divisor+3,w
  3645  0169  025B               	subwf	___lldiv@dividend+3,w
  3646  016A  1D03               	skipz
  3647  016B  2976               	goto	u1435
  3648  016C  0856               	movf	___lldiv@divisor+2,w
  3649  016D  025A               	subwf	___lldiv@dividend+2,w
  3650  016E  1D03               	skipz
  3651  016F  2976               	goto	u1435
  3652  0170  0855               	movf	___lldiv@divisor+1,w
  3653  0171  0259               	subwf	___lldiv@dividend+1,w
  3654  0172  1D03               	skipz
  3655  0173  2976               	goto	u1435
  3656  0174  0854               	movf	___lldiv@divisor,w
  3657  0175  0258               	subwf	___lldiv@dividend,w
  3658  0176                     u1435:	
  3659  0176  1C03               	skipc
  3660  0177  2988               	goto	L11
  3661  0178  0854               	movf	___lldiv@divisor,w
  3662  0179  02D8               	subwf	___lldiv@dividend,f
  3663  017A  0855               	movf	___lldiv@divisor+1,w
  3664  017B  1C03               	skipc
  3665  017C  0F55               	incfsz	___lldiv@divisor+1,w
  3666  017D  02D9               	subwf	___lldiv@dividend+1,f
  3667  017E  0856               	movf	___lldiv@divisor+2,w
  3668  017F  1C03               	skipc
  3669  0180  0F56               	incfsz	___lldiv@divisor+2,w
  3670  0181  02DA               	subwf	___lldiv@dividend+2,f
  3671  0182  0857               	movf	___lldiv@divisor+3,w
  3672  0183  1C03               	skipc
  3673  0184  0F57               	incfsz	___lldiv@divisor+3,w
  3674  0185  02DB               	subwf	___lldiv@dividend+3,f
  3675  0186  145C               	bsf	___lldiv@quotient,0
  3676  0187  1003               	clrc
  3677  0188                     L11:	
  3678  0188  0CD7               	rrf	___lldiv@divisor+3,f
  3679  0189  0CD6               	rrf	___lldiv@divisor+2,f
  3680  018A  0CD5               	rrf	___lldiv@divisor+1,f
  3681  018B  0CD4               	rrf	___lldiv@divisor,f
  3682  018C  0BE0               	decfsz	___lldiv@counter,f
  3683  018D  2963               	goto	l7725
  3684  018E                     l7737:	
  3685  018E  085F               	movf	___lldiv@quotient+3,w
  3686  018F  00D7               	movwf	?___lldiv+3
  3687  0190  085E               	movf	___lldiv@quotient+2,w
  3688  0191  00D6               	movwf	?___lldiv+2
  3689  0192  085D               	movf	___lldiv@quotient+1,w
  3690  0193  00D5               	movwf	?___lldiv+1
  3691  0194  085C               	movf	___lldiv@quotient,w
  3692  0195  00D4               	movwf	?___lldiv
  3693  0196  0008               	return
  3694  0197                     __end_of___lldiv:	
  3695  0197                     __ptext27:	
  3696 ;; *************** function ___lmul *****************
  3697 ;; Defined at:
  3698 ;;		line 15 in file "C:\Program Files (x86)\SCMCU_IDE_V2.00.07\data\sources\common\Umul32.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  multiplier      4    2[COMMON] unsigned long 
  3701 ;;  multiplicand    4    6[COMMON] unsigned long 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  product         4    0[BANK0 ] unsigned long 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  4    2[COMMON] unsigned long 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0
  3708 ;; Tracked objects:
  3709 ;;		On entry : 300/0
  3710 ;;		On exit  : 300/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3713 ;;      Params:         8       0       0       0       0
  3714 ;;      Locals:         0       4       0       0       0
  3715 ;;      Temps:          0       0       0       0       0
  3716 ;;      Totals:         8       4       0       0       0
  3717 ;;Total ram usage:       12 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    1
  3720 ;; This function calls:
  3721 ;;		Nothing
  3722 ;; This function is called by:
  3723 ;;		_ADC_Driver
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function ___lmul
  3729  0197                     ___lmul:	
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3733  0197  01D0               	clrf	___lmul@product
  3734  0198  01D1               	clrf	___lmul@product+1
  3735  0199  01D2               	clrf	___lmul@product+2
  3736  019A  01D3               	clrf	___lmul@product+3
  3737  019B                     l6389:	
  3738  019B  1C74               	btfss	___lmul@multiplier,0
  3739  019C  29B1               	goto	l7707
  3740  019D  0878               	movf	___lmul@multiplicand,w
  3741  019E  07D0               	addwf	___lmul@product,f
  3742  019F  0879               	movf	___lmul@multiplicand+1,w
  3743  01A0  1103               	clrz
  3744  01A1  1803               	skipnc
  3745  01A2  3E01               	addlw	1
  3746  01A3  1D03               	btfss	3,2
  3747  01A4  07D1               	addwf	___lmul@product+1,f
  3748  01A5  087A               	movf	___lmul@multiplicand+2,w
  3749  01A6  1103               	clrz
  3750  01A7  1803               	skipnc
  3751  01A8  3E01               	addlw	1
  3752  01A9  1D03               	btfss	3,2
  3753  01AA  07D2               	addwf	___lmul@product+2,f
  3754  01AB  087B               	movf	___lmul@multiplicand+3,w
  3755  01AC  1103               	clrz
  3756  01AD  1803               	skipnc
  3757  01AE  3E01               	addlw	1
  3758  01AF  1D03               	btfss	3,2
  3759  01B0  07D3               	addwf	___lmul@product+3,f
  3760  01B1                     l7707:	
  3761  01B1  1003               	clrc
  3762  01B2  0DF8               	rlf	___lmul@multiplicand,f
  3763  01B3  0DF9               	rlf	___lmul@multiplicand+1,f
  3764  01B4  0DFA               	rlf	___lmul@multiplicand+2,f
  3765  01B5  0DFB               	rlf	___lmul@multiplicand+3,f
  3766  01B6  1003               	clrc
  3767  01B7  0CF7               	rrf	___lmul@multiplier+3,f
  3768  01B8  0CF6               	rrf	___lmul@multiplier+2,f
  3769  01B9  0CF5               	rrf	___lmul@multiplier+1,f
  3770  01BA  0CF4               	rrf	___lmul@multiplier,f
  3771  01BB  0877               	movf	___lmul@multiplier+3,w
  3772  01BC  0476               	iorwf	___lmul@multiplier+2,w
  3773  01BD  0475               	iorwf	___lmul@multiplier+1,w
  3774  01BE  0474               	iorwf	___lmul@multiplier,w
  3775  01BF  1D03               	skipz
  3776  01C0  299B               	goto	l6389
  3777  01C1  0853               	movf	___lmul@product+3,w
  3778  01C2  00F7               	movwf	?___lmul+3
  3779  01C3  0852               	movf	___lmul@product+2,w
  3780  01C4  00F6               	movwf	?___lmul+2
  3781  01C5  0851               	movf	___lmul@product+1,w
  3782  01C6  00F5               	movwf	?___lmul+1
  3783  01C7  0850               	movf	___lmul@product,w
  3784  01C8  00F4               	movwf	?___lmul
  3785  01C9  0008               	return
  3786  01CA                     __end_of___lmul:	
  3787  01CA                     __ptext29:	
  3788 ;; *************** function _ADC_Sample *****************
  3789 ;; Defined at:
  3790 ;;		line 103 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_adc.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  adch            1    wreg     unsigned char 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  adch            1    6[COMMON] unsigned char 
  3795 ;;  ad_temp         2    8[COMMON] volatile unsigned int 
  3796 ;;  i               1    7[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 300/0
  3803 ;;		On exit  : 300/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       0       0       0       0
  3807 ;;      Locals:         4       0       0       0       0
  3808 ;;      Temps:          4       0       0       0       0
  3809 ;;      Totals:         8       0       0       0       0
  3810 ;;Total ram usage:        8 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_ADC_Driver
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _ADC_Sample
  3822  01CA                     _ADC_Sample:	
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3826                           ;ADC_Sample@adch stored from wreg
  3827  01CA  00F8               	movwf	ADC_Sample@adch
  3828                           
  3829                           ;mcu_adc.c: 105: static unsigned long adsum = 0;
  3830                           ;mcu_adc.c: 106: static unsigned int admin = 0,admax = 0;
  3831                           ;mcu_adc.c: 107: static unsigned char adtimes = 0;
  3832                           ;mcu_adc.c: 108: volatile unsigned int ad_temp;
  3833                           ;mcu_adc.c: 110: ADCON1 = 0B00000100;
  3834  01CB  3004               	movlw	4
  3835  01CC  1683               	bsf	3,5	;RP0=1, select bank1
  3836  01CD  009F               	movwf	31	;volatile
  3837                           
  3838                           ;mcu_adc.c: 111: ADCON0 = 0X41 | (adch << 2);
  3839  01CE  0878               	movf	ADC_Sample@adch,w
  3840  01CF  00F4               	movwf	??_ADC_Sample
  3841  01D0  3001               	movlw	1
  3842  01D1  1003               	clrc
  3843  01D2                     L12:	
  3844  01D2  0DF4               	rlf	??_ADC_Sample,f
  3845  01D3  3EFF               	addlw	-1
  3846  01D4  1003               	clrc
  3847  01D5  1D03               	skipz
  3848  01D6  29D2               	goto	L12
  3849  01D7  0D74               	rlf	??_ADC_Sample,w
  3850  01D8  3841               	iorlw	65
  3851  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  3852  01DA  009F               	movwf	31	;volatile
  3853  01DB  0000               	nop	;# 
  3854  01DC  0000               	nop	;# 
  3855                           
  3856                           ;mcu_adc.c: 114: GODONE = 1;
  3857  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3858  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3859  01DF  149F               	bsf	31,1	;volatile
  3860                           
  3861                           ;mcu_adc.c: 116: unsigned char i = 0;
  3862  01E0  01F9               	clrf	ADC_Sample@i
  3863  01E1                     l3137:	
  3864                           ;mcu_adc.c: 117: while(GODONE)
  3865                           
  3866  01E1  1C9F               	btfss	31,1	;volatile
  3867  01E2  29E6               	goto	l7655
  3868                           
  3869                           ;mcu_adc.c: 118: {
  3870                           ;mcu_adc.c: 119: if(0 == (--i))
  3871  01E3  0BF9               	decfsz	ADC_Sample@i,f
  3872  01E4  29E1               	goto	l3137
  3873  01E5  0008               	return
  3874  01E6                     l7655:	
  3875                           
  3876                           ;mcu_adc.c: 121: }
  3877                           ;mcu_adc.c: 123: ad_temp=(ADRESH<<4)+(ADRESL>>4);
  3878  01E6  081E               	movf	30,w	;volatile
  3879  01E7  00FA               	movwf	ADC_Sample@ad_temp	;volatile
  3880  01E8  01FB               	clrf	ADC_Sample@ad_temp+1	;volatile
  3881  01E9  0EFA               	swapf	ADC_Sample@ad_temp,f	;volatile
  3882  01EA  0EFB               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3883  01EB  30F0               	movlw	240
  3884  01EC  05FB               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3885  01ED  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3886  01EE  390F               	andlw	15
  3887  01EF  04FB               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3888  01F0  30F0               	movlw	240
  3889  01F1  05FA               	andwf	ADC_Sample@ad_temp,f	;volatile
  3890  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  3891  01F3  0E1E               	swapf	30,w	;volatile
  3892  01F4  390F               	andlw	15
  3893  01F5  07FA               	addwf	ADC_Sample@ad_temp,f	;volatile
  3894  01F6  1803               	skipnc
  3895  01F7  0AFB               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3896                           
  3897                           ;mcu_adc.c: 125: if(0 == admax)
  3898  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  3899  01F9  0840               	movf	ADC_Sample@admax,w
  3900  01FA  0441               	iorwf	ADC_Sample@admax+1,w
  3901  01FB  1D03               	btfss	3,2
  3902  01FC  2A02               	goto	l7663
  3903                           
  3904                           ;mcu_adc.c: 126: {
  3905                           ;mcu_adc.c: 127: admax = ad_temp;
  3906  01FD  087B               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3907  01FE  00C1               	movwf	ADC_Sample@admax+1
  3908  01FF  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3909  0200  00C0               	movwf	ADC_Sample@admax
  3910  0201  2A17               	goto	l7669
  3911  0202                     l7663:	
  3912                           ;mcu_adc.c: 129: }
  3913                           
  3914                           ;mcu_adc.c: 128: admin = ad_temp;
  3915                           
  3916                           
  3917                           ;mcu_adc.c: 130: else if(ad_temp > admax)
  3918  0202  087B               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3919  0203  0241               	subwf	ADC_Sample@admax+1,w
  3920  0204  1D03               	skipz
  3921  0205  2A08               	goto	u1285
  3922  0206  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3923  0207  0240               	subwf	ADC_Sample@admax,w
  3924  0208                     u1285:	
  3925  0208  1803               	skipnc
  3926  0209  2A0F               	goto	l7667
  3927                           
  3928                           ;mcu_adc.c: 131: admax = ad_temp;
  3929  020A  087B               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3930  020B  00C1               	movwf	ADC_Sample@admax+1
  3931  020C  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3932  020D  00C0               	movwf	ADC_Sample@admax
  3933  020E  2A1B               	goto	l3143
  3934  020F                     l7667:	
  3935                           
  3936                           ;mcu_adc.c: 132: else if(ad_temp < admin)
  3937  020F  0843               	movf	ADC_Sample@admin+1,w
  3938  0210  027B               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3939  0211  1D03               	skipz
  3940  0212  2A15               	goto	u1295
  3941  0213  0842               	movf	ADC_Sample@admin,w
  3942  0214  027A               	subwf	ADC_Sample@ad_temp,w	;volatile
  3943  0215                     u1295:	
  3944  0215  1803               	skipnc
  3945  0216  2A1B               	goto	l3143
  3946  0217                     l7669:	
  3947                           
  3948                           ;mcu_adc.c: 133: admin = ad_temp;
  3949  0217  087B               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3950  0218  00C3               	movwf	ADC_Sample@admin+1
  3951  0219  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3952  021A  00C2               	movwf	ADC_Sample@admin
  3953  021B                     l3143:	
  3954                           
  3955                           ;mcu_adc.c: 135: adsum += ad_temp;
  3956  021B  087A               	movf	ADC_Sample@ad_temp,w	;volatile
  3957  021C  00F4               	movwf	??_ADC_Sample
  3958  021D  087B               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3959  021E  00F5               	movwf	??_ADC_Sample+1
  3960  021F  01F6               	clrf	??_ADC_Sample+2
  3961  0220  01F7               	clrf	??_ADC_Sample+3
  3962  0221  0874               	movf	??_ADC_Sample,w
  3963  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3964  0223  07B0               	addwf	ADC_Sample@adsum^(0+128),f
  3965  0224  0875               	movf	??_ADC_Sample+1,w
  3966  0225  1103               	clrz
  3967  0226  1803               	skipnc
  3968  0227  3E01               	addlw	1
  3969  0228  1D03               	btfss	3,2
  3970  0229  07B1               	addwf	(ADC_Sample@adsum+1)^(0+128),f
  3971  022A  0876               	movf	??_ADC_Sample+2,w
  3972  022B  1103               	clrz
  3973  022C  1803               	skipnc
  3974  022D  3E01               	addlw	1
  3975  022E  1D03               	btfss	3,2
  3976  022F  07B2               	addwf	(ADC_Sample@adsum+2)^(0+128),f
  3977  0230  0877               	movf	??_ADC_Sample+3,w
  3978  0231  1103               	clrz
  3979  0232  1803               	skipnc
  3980  0233  3E01               	addlw	1
  3981  0234  1D03               	btfss	3,2
  3982  0235  07B3               	addwf	(ADC_Sample@adsum+3)^(0+128),f
  3983                           
  3984                           ;mcu_adc.c: 136: if(++adtimes >= 10)
  3985  0236  300A               	movlw	10
  3986  0237  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0238  0ACA               	incf	ADC_Sample@adtimes,f
  3988  0239  024A               	subwf	ADC_Sample@adtimes,w
  3989  023A  1C03               	skipc
  3990  023B  0008               	return
  3991                           
  3992                           ;mcu_adc.c: 137: {
  3993                           ;mcu_adc.c: 138: adsum -= admax;
  3994  023C  0840               	movf	ADC_Sample@admax,w
  3995  023D  00F4               	movwf	??_ADC_Sample
  3996  023E  0841               	movf	ADC_Sample@admax+1,w
  3997  023F  00F5               	movwf	??_ADC_Sample+1
  3998  0240  01F6               	clrf	??_ADC_Sample+2
  3999  0241  01F7               	clrf	??_ADC_Sample+3
  4000  0242  0874               	movf	??_ADC_Sample,w
  4001  0243  1683               	bsf	3,5	;RP0=1, select bank1
  4002  0244  02B0               	subwf	ADC_Sample@adsum^(0+128),f
  4003  0245  0875               	movf	??_ADC_Sample+1,w
  4004  0246  1C03               	skipc
  4005  0247  0F75               	incfsz	??_ADC_Sample+1,w
  4006  0248  02B1               	subwf	(ADC_Sample@adsum+1)^(0+128),f
  4007  0249  0876               	movf	??_ADC_Sample+2,w
  4008  024A  1C03               	skipc
  4009  024B  0F76               	incfsz	??_ADC_Sample+2,w
  4010  024C  02B2               	subwf	(ADC_Sample@adsum+2)^(0+128),f
  4011  024D  0877               	movf	??_ADC_Sample+3,w
  4012  024E  1C03               	skipc
  4013  024F  0F77               	incfsz	??_ADC_Sample+3,w
  4014  0250  02B3               	subwf	(ADC_Sample@adsum+3)^(0+128),f
  4015                           
  4016                           ;mcu_adc.c: 139: if(adsum >= admin) adsum -= admin;
  4017  0251  1283               	bcf	3,5	;RP0=0, select bank0
  4018  0252  0842               	movf	ADC_Sample@admin,w
  4019  0253  00F4               	movwf	??_ADC_Sample
  4020  0254  0843               	movf	ADC_Sample@admin+1,w
  4021  0255  00F5               	movwf	??_ADC_Sample+1
  4022  0256  01F6               	clrf	??_ADC_Sample+2
  4023  0257  01F7               	clrf	??_ADC_Sample+3
  4024  0258  0877               	movf	??_ADC_Sample+3,w
  4025  0259  1683               	bsf	3,5	;RP0=1, select bank1
  4026  025A  0233               	subwf	(ADC_Sample@adsum+3)^(0+128),w
  4027  025B  1D03               	skipz
  4028  025C  2A67               	goto	u1335
  4029  025D  0876               	movf	??_ADC_Sample+2,w
  4030  025E  0232               	subwf	(ADC_Sample@adsum+2)^(0+128),w
  4031  025F  1D03               	skipz
  4032  0260  2A67               	goto	u1335
  4033  0261  0875               	movf	??_ADC_Sample+1,w
  4034  0262  0231               	subwf	(ADC_Sample@adsum+1)^(0+128),w
  4035  0263  1D03               	skipz
  4036  0264  2A67               	goto	u1335
  4037  0265  0874               	movf	??_ADC_Sample,w
  4038  0266  0230               	subwf	ADC_Sample@adsum^(0+128),w
  4039  0267                     u1335:	
  4040  0267  1C03               	skipc
  4041  0268  2A80               	goto	l3148
  4042  0269  1283               	bcf	3,5	;RP0=0, select bank0
  4043  026A  0842               	movf	ADC_Sample@admin,w
  4044  026B  00F4               	movwf	??_ADC_Sample
  4045  026C  0843               	movf	ADC_Sample@admin+1,w
  4046  026D  00F5               	movwf	??_ADC_Sample+1
  4047  026E  01F6               	clrf	??_ADC_Sample+2
  4048  026F  01F7               	clrf	??_ADC_Sample+3
  4049  0270  0874               	movf	??_ADC_Sample,w
  4050  0271  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0272  02B0               	subwf	ADC_Sample@adsum^(0+128),f
  4052  0273  0875               	movf	??_ADC_Sample+1,w
  4053  0274  1C03               	skipc
  4054  0275  0F75               	incfsz	??_ADC_Sample+1,w
  4055  0276  02B1               	subwf	(ADC_Sample@adsum+1)^(0+128),f
  4056  0277  0876               	movf	??_ADC_Sample+2,w
  4057  0278  1C03               	skipc
  4058  0279  0F76               	incfsz	??_ADC_Sample+2,w
  4059  027A  02B2               	subwf	(ADC_Sample@adsum+2)^(0+128),f
  4060  027B  0877               	movf	??_ADC_Sample+3,w
  4061  027C  1C03               	skipc
  4062  027D  0F77               	incfsz	??_ADC_Sample+3,w
  4063  027E  02B3               	subwf	(ADC_Sample@adsum+3)^(0+128),f
  4064  027F  2A84               	goto	l7677
  4065  0280                     l3148:	
  4066                           
  4067                           ;mcu_adc.c: 140: else adsum = 0;
  4068  0280  01B0               	clrf	ADC_Sample@adsum^(0+128)
  4069  0281  01B1               	clrf	(ADC_Sample@adsum+1)^(0+128)
  4070  0282  01B2               	clrf	(ADC_Sample@adsum+2)^(0+128)
  4071  0283  01B3               	clrf	(ADC_Sample@adsum+3)^(0+128)
  4072  0284                     l7677:	
  4073                           
  4074                           ;mcu_adc.c: 142: adc.adcBufferTemp = adsum >> 3;
  4075  0284  0830               	movf	ADC_Sample@adsum^(0+128),w
  4076  0285  00F4               	movwf	??_ADC_Sample
  4077  0286  0831               	movf	(ADC_Sample@adsum+1)^(0+128),w
  4078  0287  00F5               	movwf	??_ADC_Sample+1
  4079  0288  0832               	movf	(ADC_Sample@adsum+2)^(0+128),w
  4080  0289  00F6               	movwf	??_ADC_Sample+2
  4081  028A  0833               	movf	(ADC_Sample@adsum+3)^(0+128),w
  4082  028B  00F7               	movwf	??_ADC_Sample+3
  4083  028C  3003               	movlw	3
  4084  028D                     u1355:	
  4085  028D  1003               	clrc
  4086  028E  0CF7               	rrf	??_ADC_Sample+3,f
  4087  028F  0CF6               	rrf	??_ADC_Sample+2,f
  4088  0290  0CF5               	rrf	??_ADC_Sample+1,f
  4089  0291  0CF4               	rrf	??_ADC_Sample,f
  4090  0292  3EFF               	addlw	-1
  4091  0293  1D03               	skipz
  4092  0294  2A8D               	goto	u1355
  4093  0295  0875               	movf	??_ADC_Sample+1,w
  4094  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4095  0297  00A6               	movwf	_adc+6
  4096  0298  0874               	movf	??_ADC_Sample,w
  4097  0299  00A5               	movwf	_adc+5
  4098                           
  4099                           ;mcu_adc.c: 144: adsum = 0;
  4100  029A  1683               	bsf	3,5	;RP0=1, select bank1
  4101  029B  01B0               	clrf	ADC_Sample@adsum^(0+128)
  4102  029C  01B1               	clrf	(ADC_Sample@adsum+1)^(0+128)
  4103  029D  01B2               	clrf	(ADC_Sample@adsum+2)^(0+128)
  4104  029E  01B3               	clrf	(ADC_Sample@adsum+3)^(0+128)
  4105                           
  4106                           ;mcu_adc.c: 145: admin = 0;
  4107  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4108  02A0  01C2               	clrf	ADC_Sample@admin
  4109  02A1  01C3               	clrf	ADC_Sample@admin+1
  4110                           
  4111                           ;mcu_adc.c: 146: admax = 0;
  4112  02A2  01C0               	clrf	ADC_Sample@admax
  4113  02A3  01C1               	clrf	ADC_Sample@admax+1
  4114                           
  4115                           ;mcu_adc.c: 147: adtimes = 0;
  4116  02A4  01CA               	clrf	ADC_Sample@adtimes
  4117  02A5  0008               	return
  4118  02A6                     __end_of_ADC_Sample:	
  4119  02A6                     __ptext26:	
  4120 ;; *************** function ___lwdiv *****************
  4121 ;; Defined at:
  4122 ;;		line 6 in file "C:\Program Files (x86)\SCMCU_IDE_V2.00.07\data\sources\common\lwdiv.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  divisor         2    2[COMMON] unsigned int 
  4125 ;;  dividend        2    4[COMMON] unsigned int 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  quotient        2    6[COMMON] unsigned int 
  4128 ;;  counter         1    8[COMMON] unsigned char 
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  2    2[COMMON] unsigned int 
  4131 ;; Registers used:
  4132 ;;		wreg, status,2, status,0
  4133 ;; Tracked objects:
  4134 ;;		On entry : 300/0
  4135 ;;		On exit  : 300/0
  4136 ;;		Unchanged: 300/0
  4137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4138 ;;      Params:         4       0       0       0       0
  4139 ;;      Locals:         3       0       0       0       0
  4140 ;;      Temps:          0       0       0       0       0
  4141 ;;      Totals:         7       0       0       0       0
  4142 ;;Total ram usage:        7 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    1
  4145 ;; This function calls:
  4146 ;;		Nothing
  4147 ;; This function is called by:
  4148 ;;		_ADC_Driver
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           
  4153                           ;psect for function ___lwdiv
  4154  02A6                     ___lwdiv:	
  4155                           
  4156                           ;incstack = 0
  4157                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4158  02A6  01F8               	clrf	___lwdiv@quotient
  4159  02A7  01F9               	clrf	___lwdiv@quotient+1
  4160  02A8  0874               	movf	___lwdiv@divisor,w
  4161  02A9  0475               	iorwf	___lwdiv@divisor+1,w
  4162  02AA  1903               	btfsc	3,2
  4163  02AB  2ACB               	goto	l7763
  4164  02AC  01FA               	clrf	___lwdiv@counter
  4165  02AD                     L8:	
  4166  02AD  0AFA               	incf	___lwdiv@counter,f
  4167  02AE  1BF5               	btfsc	___lwdiv@divisor+1,7
  4168  02AF  2AB4               	goto	l7751
  4169  02B0  1003               	clrc
  4170  02B1  0DF4               	rlf	___lwdiv@divisor,f
  4171  02B2  0DF5               	rlf	___lwdiv@divisor+1,f
  4172  02B3  2AAD               	goto	L8
  4173  02B4                     l7751:	
  4174  02B4  1003               	clrc
  4175  02B5  0DF8               	rlf	___lwdiv@quotient,f
  4176  02B6  0DF9               	rlf	___lwdiv@quotient+1,f
  4177  02B7  0875               	movf	___lwdiv@divisor+1,w
  4178  02B8  0277               	subwf	___lwdiv@dividend+1,w
  4179  02B9  1D03               	skipz
  4180  02BA  2ABD               	goto	u1475
  4181  02BB  0874               	movf	___lwdiv@divisor,w
  4182  02BC  0276               	subwf	___lwdiv@dividend,w
  4183  02BD                     u1475:	
  4184  02BD  1C03               	skipc
  4185  02BE  2AC7               	goto	L9
  4186  02BF  0874               	movf	___lwdiv@divisor,w
  4187  02C0  02F6               	subwf	___lwdiv@dividend,f
  4188  02C1  0875               	movf	___lwdiv@divisor+1,w
  4189  02C2  1C03               	skipc
  4190  02C3  03F7               	decf	___lwdiv@dividend+1,f
  4191  02C4  02F7               	subwf	___lwdiv@dividend+1,f
  4192  02C5  1478               	bsf	___lwdiv@quotient,0
  4193  02C6  1003               	clrc
  4194  02C7                     L9:	
  4195  02C7  0CF5               	rrf	___lwdiv@divisor+1,f
  4196  02C8  0CF4               	rrf	___lwdiv@divisor,f
  4197  02C9  0BFA               	decfsz	___lwdiv@counter,f
  4198  02CA  2AB4               	goto	l7751
  4199  02CB                     l7763:	
  4200  02CB  0879               	movf	___lwdiv@quotient+1,w
  4201  02CC  00F5               	movwf	?___lwdiv+1
  4202  02CD  0878               	movf	___lwdiv@quotient,w
  4203  02CE  00F4               	movwf	?___lwdiv
  4204  02CF  0008               	return
  4205  02D0                     __end_of___lwdiv:	
  4206  02D0                     __ptext25:	
  4207 ;; *************** function ___wmul *****************
  4208 ;; Defined at:
  4209 ;;		line 15 in file "C:\Program Files (x86)\SCMCU_IDE_V2.00.07\data\sources\common\Umul16.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  multiplier      2    2[COMMON] unsigned int 
  4212 ;;  multiplicand    2    4[COMMON] unsigned int 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  product         2    6[COMMON] unsigned int 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  2    2[COMMON] unsigned int 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2, status,0
  4219 ;; Tracked objects:
  4220 ;;		On entry : 300/0
  4221 ;;		On exit  : 300/0
  4222 ;;		Unchanged: 300/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4224 ;;      Params:         4       0       0       0       0
  4225 ;;      Locals:         2       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0
  4227 ;;      Totals:         6       0       0       0       0
  4228 ;;Total ram usage:        6 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    1
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_ADC_Driver
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function ___wmul
  4240  02D0                     ___wmul:	
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4244  02D0  01F8               	clrf	___wmul@product
  4245  02D1  01F9               	clrf	___wmul@product+1
  4246  02D2                     l7689:	
  4247  02D2  1C74               	btfss	___wmul@multiplier,0
  4248  02D3  2ADA               	goto	l7693
  4249  02D4  0876               	movf	___wmul@multiplicand,w
  4250  02D5  07F8               	addwf	___wmul@product,f
  4251  02D6  1803               	skipnc
  4252  02D7  0AF9               	incf	___wmul@product+1,f
  4253  02D8  0877               	movf	___wmul@multiplicand+1,w
  4254  02D9  07F9               	addwf	___wmul@product+1,f
  4255  02DA                     l7693:	
  4256  02DA  1003               	clrc
  4257  02DB  0DF6               	rlf	___wmul@multiplicand,f
  4258  02DC  0DF7               	rlf	___wmul@multiplicand+1,f
  4259  02DD  1003               	clrc
  4260  02DE  0CF5               	rrf	___wmul@multiplier+1,f
  4261  02DF  0CF4               	rrf	___wmul@multiplier,f
  4262  02E0  0874               	movf	___wmul@multiplier,w
  4263  02E1  0475               	iorwf	___wmul@multiplier+1,w
  4264  02E2  1D03               	btfss	3,2
  4265  02E3  2AD2               	goto	l7689
  4266  02E4  0879               	movf	___wmul@product+1,w
  4267  02E5  00F5               	movwf	?___wmul+1
  4268  02E6  0878               	movf	___wmul@product,w
  4269  02E7  00F4               	movwf	?___wmul
  4270  02E8  0008               	return
  4271  02E9                     __end_of___wmul:	
  4272                           
  4273                           	psect	text30
  4274  0642                     __ptext30:	
  4275 ;; *************** function _ISR *****************
  4276 ;; Defined at:
  4277 ;;		line 98 in file "F:\data\Ð¾Â°lSCMCU\JBQ-B04L1\soft\SOFT\Source\mcu_int.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 300/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4291 ;;      Params:         0       0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0
  4293 ;;      Temps:          2       0       0       0       0
  4294 ;;      Totals:         2       0       0       0       0
  4295 ;;Total ram usage:        2 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		Interrupt level 1
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _ISR
  4306  0642                     _ISR:	
  4307                           
  4308                           ;mcu_int.c: 100: if (T0IE && T0IF)
  4309  0642  1A8B               	btfsc	11,5	;volatile
  4310  0643  1D0B               	btfss	11,2	;volatile
  4311  0644  2E46               	goto	i1l5086
  4312                           
  4313                           ;mcu_int.c: 101: {
  4314                           ;mcu_int.c: 102: T0IF = 0;
  4315  0645  110B               	bcf	11,2	;volatile
  4316  0646                     i1l5086:	
  4317                           
  4318                           ;mcu_int.c: 103: }
  4319                           ;mcu_int.c: 104: if (TMR1IE && TMR1IF)
  4320  0646  1683               	bsf	3,5	;RP0=1, select bank1
  4321  0647  1303               	bcf	3,6	;RP1=0, select bank1
  4322  0648  1C0C               	btfss	12,0	;volatile
  4323  0649  2E4E               	goto	i1l5087
  4324  064A  1283               	bcf	3,5	;RP0=0, select bank0
  4325  064B  1C0C               	btfss	12,0	;volatile
  4326  064C  2E4E               	goto	i1l5087
  4327                           
  4328                           ;mcu_int.c: 105: {
  4329                           ;mcu_int.c: 106: TMR1IF = 0;
  4330  064D  100C               	bcf	12,0	;volatile
  4331  064E                     i1l5087:	
  4332                           
  4333                           ;mcu_int.c: 107: }
  4334                           ;mcu_int.c: 109: if(TMR2IF)
  4335  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4336  064F  1C8C               	btfss	12,1	;volatile
  4337  0650  2E59               	goto	i1l8079
  4338                           
  4339                           ;mcu_int.c: 110: {
  4340                           ;mcu_int.c: 111: TMR2IF = 0;
  4341  0651  108C               	bcf	12,1	;volatile
  4342                           
  4343                           ;mcu_int.c: 115: if (++gTimeCntFor10ms >= 100) {
  4344  0652  3064               	movlw	100
  4345  0653  0ACB               	incf	_gTimeCntFor10ms,f	;volatile
  4346  0654  024B               	subwf	_gTimeCntFor10ms,w	;volatile
  4347  0655  1C03               	skipc
  4348  0656  2E59               	goto	i1l8079
  4349                           
  4350                           ;mcu_int.c: 116: gTimeCntFor10ms = 0;
  4351  0657  01CB               	clrf	_gTimeCntFor10ms	;volatile
  4352                           
  4353                           ;mcu_int.c: 117: gbTime10ms = 1;
  4354  0658  1570               	bsf	_gbTime10ms/(0+8),_gbTime10ms& (0+7)
  4355  0659                     i1l8079:	
  4356                           
  4357                           ;mcu_int.c: 119: }
  4358                           ;mcu_int.c: 121: }
  4359                           ;mcu_int.c: 122: if(RAIF || RBIF)
  4360  0659  1B8C               	btfsc	12,7	;volatile
  4361  065A  2E5D               	goto	i1l5092
  4362  065B  1C0B               	btfss	11,0	;volatile
  4363  065C  2E5F               	goto	i1l5093
  4364  065D                     i1l5092:	
  4365                           
  4366                           ;mcu_int.c: 123: {
  4367                           ;mcu_int.c: 124: RAIF = 0;
  4368  065D  138C               	bcf	12,7	;volatile
  4369                           
  4370                           ;mcu_int.c: 125: RBIF = 0;
  4371  065E  100B               	bcf	11,0	;volatile
  4372  065F                     i1l5093:	
  4373  065F  0873               	movf	??_ISR+1,w
  4374  0660  008A               	movwf	10
  4375  0661  0E72               	swapf	??_ISR^(0+-128),w
  4376  0662  0083               	movwf	3
  4377  0663  0EFE               	swapf	126,f
  4378  0664  0E7E               	swapf	126,w
  4379  0665  0009               	retfie
  4380  0666                     __end_of_ISR:	
  4381  007E                     btemp	set	126	;btemp
  4382  007E                     wtemp0	set	126
  4383                           
  4384                           	psect	intentry
  4385  0004                     __pintentry:	
  4386                           ;incstack = 0
  4387                           ; Regs used in _ISR: [wreg+status,2+status,0]
  4388                           
  4389  0004                     interrupt_function:	
  4390  007E                     saved_w	set	btemp
  4391  0004  00FE               	movwf	btemp
  4392  0005  0E03               	swapf	3,w
  4393  0006  00F2               	movwf	??_ISR
  4394  0007  080A               	movf	10,w
  4395  0008  00F3               	movwf	??_ISR+1
  4396  0009  118A  2E42         	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     20      68
    BANK1            80      0      25
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _MCU_EnterSleep->_MCU_Config
    _ADC_Driver->_ADC_Sample
    _ADC_Driver->___lmul
    ___lldiv->___lmul

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_Driver
    _ADC_Driver->___lldiv
    ___lldiv->___lmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1626
                         _ADC_Driver
                     _CUP_USB_Driver
                         _KEY_Driver
                     _KEY_WorkDriver
                        _LED_Display
                         _MCU_Config
                        _MCU_PwmInit
                          _Run_State
 ---------------------------------------------------------------------------------
 (1) _Run_State                                            0     0      0       0
                             _Charge
                          _Motor_OFF
                              _Sleep
                            _Standby
                               _Work
 ---------------------------------------------------------------------------------
 (2) _Work                                                 0     0      0       0
                          _Motor_OFF
                           _Motor_ON
 ---------------------------------------------------------------------------------
 (3) _Motor_ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Standby                                              0     0      0       0
                          _Motor_OFF
 ---------------------------------------------------------------------------------
 (2) _Sleep                                                0     0      0       0
                     _MCU_EnterSleep
 ---------------------------------------------------------------------------------
 (3) _MCU_EnterSleep                                       0     0      0       0
                         _MCU_Config
                 _MCU_GpioSetToSleep
 ---------------------------------------------------------------------------------
 (4) _MCU_GpioSetToSleep                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MCU_Config                                           3     3      0       0
                                              2 COMMON     3     3      0
                        _MCU_AdcInit
                       _MCU_GpioInit
                        _MCU_IntInit
                  _MCU_PoweronConfig
                        _MCU_PwmInit
                      _MCU_TimerInit
 ---------------------------------------------------------------------------------
 (5) _MCU_TimerInit                                        0     0      0       0
                    _MCU_Timer0_Init
                    _MCU_Timer1_Init
                    _MCU_Timer2_Init
 ---------------------------------------------------------------------------------
 (6) _MCU_Timer2_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MCU_Timer1_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MCU_Timer0_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MCU_PwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MCU_PoweronConfig                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MCU_IntInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MCU_GpioInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MCU_AdcInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Charge                                               2     2      0       0
                                              2 COMMON     2     2      0
                          _Motor_OFF
 ---------------------------------------------------------------------------------
 (3) _Motor_OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Display                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KEY_WorkDriver                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KEY_Driver                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CUP_USB_Driver                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Driver                                           3     3      0    1626
                                             17 BANK0      3     3      0
                         _ADC_Sample
                            ___lldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     410
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     480
                                              4 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     202
                                              2 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Driver
     _ADC_Sample
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___lwdiv
     ___wmul
   _CUP_USB_Driver
   _KEY_Driver
   _KEY_WorkDriver
   _LED_Display
   _MCU_Config
     _MCU_AdcInit
     _MCU_GpioInit
     _MCU_IntInit
     _MCU_PoweronConfig
     _MCU_PwmInit
     _MCU_TimerInit
       _MCU_Timer0_Init
       _MCU_Timer1_Init
       _MCU_Timer2_Init
   _MCU_PwmInit
   _Run_State
     _Charge
       _Motor_OFF
     _Motor_OFF
     _Sleep
       _MCU_EnterSleep
         _MCU_Config
           _MCU_AdcInit
           _MCU_GpioInit
           _MCU_IntInit
           _MCU_PoweronConfig
           _MCU_PwmInit
           _MCU_TimerInit
             _MCU_Timer0_Init
             _MCU_Timer1_Init
             _MCU_Timer2_Init
         _MCU_GpioSetToSleep
     _Standby
       _Motor_OFF
     _Work
       _Motor_OFF
       _Motor_ON

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       2       0       14.3%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      69       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      44       5       85.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      19       7       31.3%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0      69      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 21 19:54:49 2020

                          pc 0002                           fsr 0004          ___wmul@multiplicand 0076  
        __size_of_ADC_Driver 0131                          l810 05B8                          l811 05C3  
                        l820 05C2                          l813 05C5                          l822 05C5  
                        l806 05AF                          l831 05CD                          l816 05BD  
                        l808 05B2                          l825 05C9                          l809 05B5  
                        l819 05BE                          l772 0699                          l828 05CA  
                        l787 057F                          _GIE 005F                          _RA0 0028  
                        _RA1 0029                          _RB0 0030                          _RA3 002B  
                        _RA6 002E                          _RB4 0034                          _RB5 0035  
                        _PR2 0092                          _ISR 0642          __size_of_ADC_Sample 00DC  
                        _adc 0020                          _led 00B4                          _key 003B  
                        fsr0 0004                          indf 0000                 ?_LED_Display 0072  
           _gbUsbPlugInEvent 0381                         S8223 06B6                         S8225 06C0  
                       S8227 06A0                         ?_ISR 0072                         l3143 021B  
                       l3137 01E1                         l3148 0280                         l3156 002C  
                       l3157 0032                         l3158 0038                         l3167 00C0  
                       l1684 0422                         l8021 00D4                         l8013 00BE  
                       l8005 0067                         l8023 00FB                         l8031 0133  
                       l8025 0100                         l8033 0141                         l8017 00CA  
                       l8035 0142                         l7501 0326                         l7503 03E3  
                       l7409 050F                         l8155 0632                         l6389 019B  
                       l7613 0364                         l7621 0372                         l8149 0624  
                       l7607 035A                         l7623 037E                         l7543 0441  
                       l7535 0435                         l7633 03A9                         l7617 036F  
                       l7545 0442                         l7707 01B1                         l7811 061A  
                       l7475 046A                         l7395 052D                         l7725 0163  
                       l7821 0670                         l7901 05A6                         l7637 03AD  
                       l7573 0472                         l7493 0317                         l7477 02E9  
                       l7557 045C                         l7663 0202                         l7655 01E6  
                       l7751 02B4                         l7591 0348                         l7583 033A  
                       l7487 02FD                         l7567 0466                         l7737 018E  
                       l7809 0618                         l7913 05C0                         l7577 0329  
                       l7667 020F                         l7763 02CB                         l7771 05E4  
                       l7819 066D                         l7907 05BB                         l7677 0284  
                       l7669 0217                         l7693 02DA                         l7925 05D0  
                       l7589 0346                         l7791 0600                         l7871 0567  
                       l7863 0556                         l7599 0351                         l7951 03E1  
                       l7689 02D2                         l7785 05F7                         l7881 0576  
                       l7873 0569                         l7857 054B                         l7953 03E2  
                       l7937 03BF                         l7787 05FA                         l7867 055F  
                       l7947 03DF                         l7939 03CE                         l7981 0041  
                       l7949 03E0                         l7957 03C1                         l7983 004F  
                       l7967 0025                         l7895 059D                         l7889 0594  
                       l7995 0058                         l7989 0052                         _T0IE 005D  
                       _T0IF 005A                         u2005 00D0                         u1205 039A  
                       u1215 03A5                         u1135 0334                         _IOCA 0087  
                       _IOCB 0096                         u1335 0267                         u2137 04C0  
                       u1355 028D                         u1435 0176                         u1195 038C  
                       u1285 0208                         u1295 0215                         u1475 02BD  
                       _PIE1 008C                         _PIE2 008D                         u1765 0586  
                       u1775 058E                         _RAIE 0467                         _PEIE 005E  
                       _RAIF 0067                         _RBIE 005B                         _RBIF 0058  
                       u1995 00C6                         _PIR1 000C                         _PIR2 000D  
                       _TMR0 0001                         _TMR2 0011                         _WPDA 0007  
                       _WPDB 0008                         _WPUA 018E                         _WPUB 0095  
                ?_MCU_Config 0072                         _Work 03E3                  ?_KEY_Driver 0072  
                       _main 061D                         btemp 007E                         _work 0046  
                       start 000B             ??_MCU_EnterSleep 0077                        ??_ISR 0072  
         _MCU_GpioSetToSleep 0494      __size_of_CUP_USB_Driver 001A              __end_of_Standby 0329  
                      ?_Work 0072                 ?_MCU_AdcInit 0072                        ?_main 0072  
                      _ANSEL 0188              __end_of___lldiv 0197                        _T2CON 0012  
            __end_of___lwdiv 02D0                        _PORTA 0005                        _PORTB 0006  
                      _TRISA 0085                        _PWMTH 0190                        _TRISB 0086  
                      _PWMTL 018F          ?_MCU_GpioSetToSleep 0072          ___lmul@multiplicand 0078  
                      _Sleep 0472                        _gbOcp 038D                        _gbUcp 038C  
               ?_MCU_IntInit 0072                        _timer 00A0               __pbitbssCOMMON 0380  
                      pclath 000A                 ?_MCU_PwmInit 0072                        status 0003  
                      wtemp0 007E         ??_MCU_GpioSetToSleep 0074              __initialization 000D  
               __end_of_Work 046A                 __end_of_main 0642     __size_of_MCU_Timer0_Init 0004  
   __size_of_MCU_Timer1_Init 0001     __size_of_MCU_Timer2_Init 0013                       ??_Work 0074  
                     ??_main 007C          __size_of_MCU_Config 0017          __size_of_KEY_Driver 003F  
           __end_of_Motor_ON 0472                       ?_Sleep 0072                       _ADCON0 001F  
                     _ADCON1 009F                       _ADRESH 001E                       _ADRESL 009E  
                     _ANSELH 0189                       _GODONE 00F9                       i1l5092 065D  
                     i1l5093 065F                       i1l5086 0646                       i1l5087 064E  
                     i1l8079 0659                       _INTCON 000B                 ??_ADC_Driver 0061  
                     _OSCCON 008F                       _TMR1IE 0460                       _TMR1IF 0060  
                     _TMR2IE 0461                       _TMR2IF 0061                       _PWMD2L 0195  
               ??_ADC_Sample 0074                       _WDTCON 0105                       _TRISA2 042A  
                     _TRISB1 0431                       _TRISA4 042C                       _TRISA5 042D  
                     _TRISA7 042F                       _Charge 0329                    ??_Standby 0074  
              ?_MCU_GpioInit 0072                       ___lmul 0197                       ___wmul 02D0  
                  ??___lldiv 007C                    ??___lwdiv 0078             ??_KEY_WorkDriver 0074  
         __size_of_Motor_OFF 0004           __end_of_ADC_Driver 014F           __end_of_ADC_Sample 02A6  
                     saved_w 007E           __size_of_Run_State 002D         __size_of_LED_Display 009E  
    __end_of__initialization 001B               ??_MCU_GpioInit 0074                   _gbCupEvent 0387  
             __pcstackCOMMON 0072                __end_of_Sleep 0476               _CUP_USB_Driver 0686  
             _gbitChrPwmDuty 038A                   _gbTime10ms 0382       __size_of_MCU_TimerInit 0005  
       __size_of_MCU_AdcInit 0007            ??_MCU_Timer0_Init 0074            ??_MCU_Timer1_Init 0074  
          ??_MCU_Timer2_Init 0074                      ??_Sleep 0077                   _charPeriod 004D  
                 __pbssBANK0 0020                   __pbssBANK1 00A0         __size_of_MCU_IntInit 000A  
               ??_MCU_Config 0074                 ??_KEY_Driver 0074            __end_of_Motor_OFF 046E  
       __size_of_MCU_PwmInit 0016                      ?_Charge 0072                    ?_Motor_ON 0072  
                 __pmaintext 061D            __end_of_Run_State 03E3                      ?___lmul 0074  
     __end_of_CUP_USB_Driver 06A0                      ?___wmul 0074                   __pintentry 0004  
             ___lmul@product 0050           __end_of_MCU_Config 04D1           __end_of_KEY_Driver 061D  
                    _PWMD23H 011D                      _PWMCON0 0107                _MCU_TimerInit 0506  
            __size_of_Charge 008D                   ??_Motor_ON 0074              ADC_Sample@admax 0040  
            ADC_Sample@admin 0042              ADC_Sample@adsum 00B0                      _Standby 02E9  
            ?_CUP_USB_Driver 0072              __size_of___lmul 0033            _MCU_PoweronConfig 04FF  
                    ___lldiv 014F              __size_of___wmul 0019                      ___lwdiv 02A6  
         ?_MCU_PoweronConfig 0072                      __ptext0 0000                      __ptext1 03B6  
                    __ptext2 03E3                      __ptext3 046E                      __ptext4 02E9  
                    __ptext5 0472                      __ptext6 0476                      __ptext7 0494  
                    __ptext8 04BA                      __ptext9 0506                      _ledMode 004E  
               __size_of_ISR 0024                  _gIsCharging 0389          ??_MCU_PoweronConfig 0074  
       __end_of_MCU_GpioInit 04F5                      clrloop0 06CB         end_of_initialization 001B  
            _sleep10sTimeCnt 0048               ?_MCU_TimerInit 0072              ___lldiv@divisor 0054  
__size_of_MCU_GpioSetToSleep 0026              ___lldiv@counter 0060    __end_of_MCU_PoweronConfig 0506  
                _gbBatCharge 0380      __size_of_MCU_EnterSleep 001E               __end_of_Charge 03B6  
            _MCU_Timer0_Init 050B              _MCU_Timer1_Init 052C              _MCU_Timer2_Init 052D  
             __end_of___lmul 01CA               __end_of___wmul 02E9                ??_LED_Display 0074  
        start_initialization 000D                  __end_of_ISR 0666              ??_MCU_TimerInit 0074  
                   ??_Charge 0074                  _gbUsbPlugIn 038B                    _Motor_OFF 046A  
 __size_of_MCU_PoweronConfig 0007                     ??___lmul 007C                     ??___wmul 0078  
          __size_of_Motor_ON 0004            ADC_Sample@ad_temp 007A            ADC_Sample@adtimes 004A  
                  _Run_State 03B6                ??_MCU_AdcInit 0074        __size_of_MCU_GpioInit 0024  
                  ___latbits 0001                __pcstackBANK0 0050                    _gbLedWait 0386  
              ??_MCU_IntInit 0074      __size_of_KEY_WorkDriver 0020          __end_of_LED_Display 05DE  
              ??_MCU_PwmInit 0074      __end_of_MCU_Timer0_Init 050F      __end_of_MCU_Timer1_Init 052D  
    __end_of_MCU_Timer2_Init 0540             ??_CUP_USB_Driver 0074             ___lwdiv@dividend 0076  
                 ?_Motor_OFF 0072                     ?_Standby 0072                 _MCU_GpioInit 04D1  
                   ?___lldiv 0054                     ?___lwdiv 0074                   ?_Run_State 0072  
                  __pswtext1 06B6                    __pswtext2 06C0                    __pswtext3 06A0  
             _MCU_EnterSleep 0476                  ADC_Driver@i 0063              _gTimeCntFor10ms 004B  
             ADC_Sample@adch 0078               __size_of_Sleep 0004          __end_of_MCU_AdcInit 0516  
           ___lwdiv@quotient 0078                  ADC_Sample@i 0079            interrupt_function 0004  
        __end_of_MCU_IntInit 04FF               ___wmul@product 0078                    clear_ram0 06CA  
        __end_of_MCU_PwmInit 052C                    _pwmTarget 004C       __end_of_MCU_EnterSleep 0494  
          ___wmul@multiplier 0074                  _LED_Display 0540            ___lmul@multiplier 0074  
                 _ADC_Driver 001E                   _ADC_Sample 01CA   __end_of_MCU_GpioSetToSleep 04BA  
           ?_MCU_Timer0_Init 0072             ?_MCU_Timer1_Init 0072             ?_MCU_Timer2_Init 0072  
                ??_Motor_OFF 0074                     _Motor_ON 046E                     _gIsCupOk 0388  
           __size_of_Standby 0040             __size_of___lldiv 0048                     _gbLed1hz 0384  
                   _gbLed2hz 0383             __size_of___lwdiv 002A                  ??_Run_State 0077  
            ?_MCU_EnterSleep 0072                  _MCU_AdcInit 050F              ___lwdiv@divisor 0074  
             _KEY_WorkDriver 0666              ___lwdiv@counter 007A                     __ptext10 052D  
                   __ptext11 052C                     __ptext20 0540                     __ptext12 050B  
                   __ptext21 0666                     __ptext13 0516                     __ptext30 0642  
                   __ptext22 05DE                     __ptext14 04FF                     __ptext23 0686  
                   __ptext15 04F5                     __ptext24 001E                     __ptext16 04D1  
                   __ptext25 02D0                     __ptext17 050F                     __ptext26 02A6  
                   __ptext18 0329                     __ptext27 0197                     __ptext19 046A  
                   __ptext28 014F                     __ptext29 01CA                  _MCU_IntInit 04F5  
                _MCU_PwmInit 0516                __size_of_Work 0087                __size_of_main 0025  
                   _pwmMsCnt 00B7                     _usbIndex 0385                     _workMode 004F  
             _charDisplayCnt 0044       __end_of_KEY_WorkDriver 0686                     intlevel1 0000  
                ?_ADC_Driver 0072                   _MCU_Config 04BA                   _KEY_Driver 05DE  
                ?_ADC_Sample 0072        __end_of_MCU_TimerInit 050B             ___lldiv@dividend 0058  
                 _OPTION_REG 0081             ___lldiv@quotient 005C              ?_KEY_WorkDriver 0072  
